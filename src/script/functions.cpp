#include "function.hpp"
#include "logc/log.h"

namespace Script {

std::unordered_map<std::string, FunctionInfo> FunctionResolver::functions({
    {
        "unusedfunction0",
        { 0x1000, "UnusedFunction0", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getdistance", { 0x1001, "GetDistance", "Used to find the distance between two references.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "additem", { 0x1002, "AddItem", "Adds Count items of object ObjectID to the calling container's inventory.  It has two required parameters (the object to add and the quantity) and one optional parameter (whether to display a message on screen).", FunctionType::ReferenceBound, Type::Reference, 3, { { Type::Reference, 0 }, { Type::Integer, 0 }, { Type::Integer, 0 } } } },
    { "setessential", { 0x1003, "SetEssential", "Sets the essential state of the object.", FunctionType::Standalone, Type::Reference, 2, { { Type::Integer, 0 }, { Type::Integer, 0 } } } },
    { "rotate", { 0x1004, "Rotate", "Rotates the calling object relative to the world on the specified axis (X, Y, or Z) at a given speed in degrees/sec.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "getlocked", { 0x1005, "GetLocked", "The GetLocked script function gets the access state of terminals and locks.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    {
        "getpos",
        { 0x1006, "GetPos", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "setpos", { 0x1007, "SetPos", "Sets the position of the calling object relative to the world on the specified axis (X, Y, or Z).", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    {
        "getangle",
        { 0x1008, "GetAngle", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "setangle", { 0x1009, "SetAngle", "Sets the angle of the calling object relative to the world on the specified axis (X, Y, or Z).", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "getstartingpos", { 0x100A, "GetStartingPos", "Returns the original world position of the object on the selected axis (X, Y, or Z) in float. The returned position is the position the object was placed in the editor, not it's current game state.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getstartingangle", { 0x100B, "GetStartingAngle", "Returns the original world rotation angle of the object on the selected axis (X, Y, or Z) in float. The angle is the angle the object was placed in the editor, not it's current game state.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getsecondspassed", { 0x100C, "GetSecondsPassed", "Returns the number of real life seconds that have passed since this function was last called by the calling script.", FunctionType::Standalone, Type::Integer, 0, {} } },
    {
        "activate",
        { 0x100D, "Activate", "", FunctionType::Standalone, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Integer, 0 } } },
    },
    { "getactorvalue", { 0x100E, "GetActorValue", "Returns the current, modified value of the specified stat. GetActorValue can use any stat available to the player or actor (NPCs and creatures).", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Integer, 0 } } } },
    { "setactorvalue", { 0x100F, "SetActorValue", "SetActorValue sets the stat's base value to the new value.", FunctionType::ReferenceBound, Type::Reference, 3, { { Type::Integer, 0 }, { Type::Integer, 0 }, { Type::Reference, 0 } } } },
    { "modactorvalue", { 0x1010, "ModActorValue", "Permanently alters the actor value. The modifier may be positive or negative.", FunctionType::ReferenceBound, Type::Reference, 3, { { Type::Integer, 0 }, { Type::Integer, 0 }, { Type::Reference, 0 } } } },
    {
        "setatstart",
        { 0x1011, "SetAtStart", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getcurrenttime", { 0x1012, "GetCurrentTime", "Returns current game time, in decimal format, e.g. 4:30 am = 4.5, 7:45 pm = 19.75.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "playgroup", { 0x1013, "PlayGroup", "PlayGroup plays an animation group on the calling actor. See AnimGroups for a list of possible animations.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "loopgroup", { 0x1014, "LoopGroup", "Plays the animation group defined by GroupName. The animation will be looped the number of times specified, and then return to the Idle animation. Optional flags can be used to start the group in different ways.", FunctionType::ReferenceBound, Type::Reference, 2, { { Type::Integer, 0 }, { Type::Integer, 0 } } } },
    {
        "skipanim",
        { 0x1015, "SkipAnim", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "startcombat",
        { 0x1016, "StartCombat", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "stopcombat", { 0x1017, "StopCombat", "StopCombat ends the combat state for an actor, making them stop fighting. An optional target reference can be specified.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "getscale", { 0x1018, "GetScale", "GetScale returns the raw scale of the selected reference object. Normal scale is 1.00 (100%).", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "ismoving", { 0x1019, "IsMoving", "A script function and condition used to determine if an Actor is currently requesting to move.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "isturning", { 0x101A, "IsTurning", "A function and condition used to determine if an Actor is currently turning.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "getlineofsight",
        { 0x101B, "GetLineOfSight", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "addspell", { 0x101C, "AddSpell", "Adds the Actor Effect to the calling actor, which will instantly be applied. The only types of actor effects used in the Vanilla Game are addictions and abilities.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "removespell",
        { 0x101D, "RemoveSpell", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "cast",
        { 0x101E, "Cast", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getbuttonpressed", { 0x101F, "GetButtonPressed", "GetButtonPressed is used to determine which button has been selected after a message box has been displayed using ShowMessage.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "getinsamecell", { 0x1020, "GetInSameCell", "Returns true if the calling reference is in the same cell as the target Actor.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Integer, 0 } } } },
    {
        "enable",
        { 0x1021, "Enable", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "disable",
        { 0x1022, "Disable", "", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Integer, 0 } } },
    },
    { "getdisabled", { 0x1023, "GetDisabled", "Used to check whether or not a reference is disabled.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    {
        "menumode",
        { 0x1024, "MenuMode", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "placeatme",
        { 0x1025, "PlaceAtMe", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "playsound", { 0x1026, "PlaySound", "PlaySound plays the specified sound, non-locational.", FunctionType::Standalone, Type::Reference, 2, { { Type::Integer, 0 }, { Type::Integer, 0 } } } },
    {
        "getdisease",
        { 0x1027, "GetDisease", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "getvampire",
        { 0x1028, "GetVampire", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getclothingvalue", { 0x1029, "GetClothingValue", "Returns the 'clothing value' of currently worn armor, ranging from 0 to 100.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "samefaction", { 0x102A, "SameFaction", "Returns 1 if the calling actor is in the same faction as the target actor -- i.e. they are both members of at least one faction in common.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Integer, 0 } } } },
    { "samerace", { 0x102B, "SameRace", "Returns 1 if the calling actor is the same race as the target actor.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "samesex", { 0x102C, "SameSex", "Returns 1 if the calling actor is the same sex as the target actor.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "getdetected", { 0x102D, "GetDetected", "Returns 1 if the target is currently detected by the calling actor.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Integer, 0 } } } },
    { "getdead", { 0x102E, "GetDead", "Returns 1 if the object reference is dead.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "getitemcount", { 0x102F, "GetItemCount", "Returns the amount of ObjectID in the container\\actor\\creature.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "getgold",
        { 0x1030, "GetGold", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getsleeping", { 0x1031, "GetSleeping", "Returns a value based on the actor's current sleeping state", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "gettalkedtopc", { 0x1032, "GetTalkedToPC", "Returns 1 if the NPC has ever spoken to the player, 0 otherwise.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "say",
        { 0x1033, "Say", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "sayto", { 0x1034, "SayTo", "SayTo makes an actor say a single line of dialogue to another actor.  The function returns 0, so setting a variable equal to the return value will not do anything.  To set up an action for after the line is spoken, see SayToDone, which is a block that is triggered when the SAYTO is complete.", FunctionType::ReferenceBound, Type::Reference, 6, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getscriptvariable", { 0x1035, "GetScriptVariable", "Returns the value of a local variable in the specified object's script.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "startquest", { 0x1036, "StartQuest", "Starts the quest, which means:", FunctionType::Standalone, Type::Reference, 1, { { Type::Integer, 0 } } } },
    { "stopquest", { 0x1037, "StopQuest", "Stops the quest, which means:", FunctionType::Standalone, Type::Reference, 1, { { Type::Integer, 0 } } } },
    { "getquestrunning", { 0x1038, "GetQuestRunning", "Returns 1 if the quest is currently running, 0 if it is not.", FunctionType::Standalone, Type::Reference, 2, { { Type::Integer, 0 }, { Type::Reference, 0 } } } },
    {
        "setstage",
        { 0x1039, "SetStage", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getstage", { 0x103A, "GetStage", "Gets the highest completed quest stage. For example, if stages 10, 30, and 75 were completed, GetStage would return 75. Even when stage 30 is completed after stage 75, GetStage will still return 75 (i.e. the highest one). If you need to know if a certain quest stage is completed, use GetStageDone instead.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "getstagedone", { 0x103B, "GetStageDone", "Returns 1 if the specified stage has been completed, 0 otherwise.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "getfactionrankdifference", { 0x103C, "GetFactionRankDifference", "Returns the difference in rank between the current actor and target actor in the specified faction.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Integer, 0 } } } },
    { "getalarmed", { 0x103D, "GetAlarmed", "Returns 1 ('true') if the actor is alarmed.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "israining", { 0x103E, "IsRaining", "Returns 0 if the current weather is not classified as rain. Returns 1 if the current weather is stable and rainy.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "getattacked", { 0x103F, "GetAttacked", "Returns 1 if the calling actor has been attacked. This value is cleared when the actor drops out of combat.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "getiscreature",
        { 0x1040, "GetIsCreature", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getlocklevel", { 0x1041, "GetLockLevel", "The GetLockLevel script function gets the lock level of a terminal or lock.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    {
        "getshouldattack",
        { 0x1042, "GetShouldAttack", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getincell", { 0x1043, "GetInCell", "Returns true if the actor's current cell includes the argument as the first part of its cell name.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Integer, 0 } } } },
    { "getisclass", { 0x1044, "GetIsClass", "Returns 1 if the actor's class matches a given Class ID.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Integer, 0 } } } },
    { "getisrace", { 0x1045, "GetIsRace", "Returns True (1) if the actor's race matches a given RaceId.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Integer, 0 } } } },
    { "getissex", { 0x1046, "GetIsSex", "Returns 1 if the calling actor is of the specified sex (male/female).", FunctionType::Standalone, Type::Integer, 0, {} } },
    {
        "getinfaction",
        { 0x1047, "GetInFaction", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getisid", { 0x1048, "GetIsID", "Returns 1 if the calling object is a reference to ObjectID. The parameter for this function is a base object ID, as defined in the object window.", FunctionType::Standalone, Type::Integer, 0, {} } },
    {
        "getfactionrank",
        { 0x1049, "GetFactionRank", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getglobalvalue", { 0x104A, "GetGlobalValue", "Returns the value of a global variable.", FunctionType::Standalone, Type::Reference, 1, { { Type::Integer, 0 } } } },
    { "issnowing", { 0x104B, "IsSnowing", "Returns 0 if the current weather is not classified as snow. Returns 1 if the current weather is stable and snowy.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "getdisposition", { 0x104C, "GetDisposition", "Returns the actor's current disposition towards the target actor. Includes all modifiers currently affecting disposition.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Integer, 0 } } } },
    { "getrandompercent", { 0x104D, "GetRandomPercent", "Returns a random integer between 0 and 99 inclusive.", FunctionType::Standalone, Type::Integer, 0, {} } },
    {
        "streammusic",
        { 0x104E, "StreamMusic", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getquestvariable", { 0x104F, "GetQuestVariable", "Returns the value of a quest variable.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "getlevel", { 0x1050, "GetLevel", "Used to get an actors current level.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "getarmorrating", { 0x1051, "GetArmorRating", "Returns the total damage resistance of the armor the actor currently has equipped.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "removeitem", { 0x1052, "RemoveItem", "Removes and destroys Count items of object ObjectID from the calling container's inventory.  It has two required parameters (the object to remove and the quantity) and one optional parameter (whether to display a message on screen).", FunctionType::ReferenceBound, Type::Reference, 3, { { Type::Reference, 0 }, { Type::Integer, 0 }, { Type::Integer, 0 } } } },
    {
        "moddisposition",
        { 0x1053, "ModDisposition", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getdeadcount", { 0x1054, "GetDeadCount", "Returns the total number of this creature/NPC type that have been killed.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "showmap", { 0x1055, "ShowMap", "Adds the specified map marker to the world map and enables fast travel by passing an optional argument.", FunctionType::Standalone, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Integer, 0 } } } },
    { "startconversation", { 0x1056, "StartConversation", "Use the function to force a conversation between two NPCs, starting with a specified topic. When you call this function on an actor, the actor will seek out the target actor in order to have a conversation, no matter where the two NPCs are currently. ", FunctionType::Standalone, Type::Reference, 3, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "drop", { 0x1057, "Drop", "Calling actor drops the specified item(s) in the world at his/her feet.", FunctionType::ReferenceBound, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Integer, 0 } } } },
    { "addtopic", { 0x1058, "AddTopic", "Adds a topic to the Player's list of known topics.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "showmessage", { 0x1059, "ShowMessage", "ShowMessage is used to display messages to the player.  The message itself is an editor object that contains all the data: display text, type of message, and buttons (if the message is a message box).", FunctionType::ReferenceBound, Type::Reference, 6, { { Type::Reference, 0 }, { Type::Integer, 0 }, { Type::Integer, 0 }, { Type::Reference, 0 }, { Type::Integer, 0 }, { Type::Integer, 0 } } } },
    { "setalert", { 0x105A, "SetAlert", "Sets whether the actor is in an 'alert' state (weapon drawn). This is purely an animation state, and does not affect their actual combat status.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Integer, 0 } } } },
    { "getisalerted", { 0x105B, "GetIsAlerted", "Returns 1 if the actor is in an alerted state.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "look",
        { 0x105C, "Look", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "stoplook", { 0x105D, "StopLook", "Cancels forced head-tracking from the Look function. Actor resumes normal head-tracking behavior.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "evaluatepackage", { 0x105E, "EvaluatePackage", "EvaluatePackage or 'evp' forces the actor to reevaluate its package list.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "sendassaultalarm", { 0x105F, "SendAssaultAlarm", "Manually creates an assault crime. The calling reference is the perpetrator. There are two optional parameters: an actor reference (the specific victim, if applicable - if not applicable, use player) and a faction reference.", FunctionType::ReferenceBound, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "enableplayercontrols", { 0x1060, "EnablePlayerControls", "EnablePlayerControls enables the player's controls after use of DisablePlayerControls.", FunctionType::Standalone, Type::Reference, 21, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "disableplayercontrols", { 0x1061, "DisablePlayerControls", "DisablePlayerControls disables some or all of the player's controls.", FunctionType::Standalone, Type::Reference, 21, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getplayercontrolsdisabled", { 0x1062, "GetPlayerControlsDisabled", "GetPlayerControlsDisabled returns true (1) if any of the specified player controls are currently disabled, and false (0) otherwise.", FunctionType::Standalone, Type::Integer, 13, { { Type::Integer, 0 }, { Type::Reference, 0 }, { Type::Integer, 0 }, { Type::Reference, 0 }, { Type::Integer, 0 }, { Type::Reference, 0 }, { Type::Integer, 0 }, { Type::Reference, 0 }, { Type::Integer, 0 }, { Type::Reference, 0 }, { Type::Integer, 0 }, { Type::Reference, 0 }, { Type::Integer, 0 } } } },
    { "getheadingangle", { 0x1063, "GetHeadingAngle", "Returns the angle between the calling reference and the specified object in a range from -180 to 180 degrees.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "pickidle", { 0x1064, "PickIdle", "PickIdle causes the calling actor to choose and play an Idle Animation.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "isweaponout", { 0x1065, "IsWeaponOut", "Returns 1 if the calling actor currently has a weapon out, and 0 otherwise.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "istorchout",
        { 0x1066, "IsTorchOut", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "isshieldout",
        { 0x1067, "IsShieldOut", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "createdetectionevent", { 0x1068, "CreateDetectionEvent", "Manually generates a detection event. This function is typically used for things like sound traps -- hit a tripwire, something jangles and guys come to investigate if they're close enough to hear it.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "isactionref", { 0x1069, "IsActionRef", "Useful only inside an OnActivate block. Returns true if the specified ObjectRefID was the activator.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "isfacingup", { 0x106A, "IsFacingUp", "Idle manager function, returns 1 if the creature is knocked down and facing up.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "getknockedstate",
        { 0x106B, "GetKnockedState", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getweaponanimtype", { 0x106C, "GetWeaponAnimType", "GetWeaponAnimType Returns a number corresponding to the actor's current weapon animation type.  See notes for return values.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    {
        "isweaponskilltype",
        { 0x106D, "IsWeaponSkillType", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getcurrentaipackage", { 0x106E, "GetCurrentAIPackage", "Returns the current AI package an actor is using.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "iswaiting", { 0x106F, "IsWaiting", "Returns 1 if the actor is currently in a wait state.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "isidleplaying", { 0x1070, "IsIdlePlaying", "Returns 1 if the actor is currently playing a special idle.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "completequest", { 0x1071, "CompleteQuest", "Marks the quest as complete. The only real effect of this is that the quest is will be dimmed and moved below all active quests in the GECK, and will no longer be selectable as an active quest.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "lock", { 0x1072, "Lock", "The Lock script function changes the lock level of a terminal or lock. The second parameter can be used to specify the the new owner of the locked object.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Integer, 0 } } } },
    {
        "unlock",
        { 0x1073, "UnLock", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getminorcrimecount", { 0x1074, "GetMinorCrimeCount", "GetMinorCrimeCount returns the total number of minor crimes the player has committed against the specified NPC.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "getmajorcrimecount", { 0x1075, "GetMajorCrimeCount", "GetMajorCrimeCount returns the total number of major crimes the player has committed against the specified NPC.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    {
        "getactoraggroradiusviolated",
        { 0x1076, "GetActorAggroRadiusViolated", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "getcrimeknown",
        { 0x1077, "GetCrimeKnown", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "setenemy", { 0x1078, "SetEnemy", "SetEnemy sets an enemy/neutral relationship between two factions. It is not called on a reference.", FunctionType::Standalone, Type::Reference, 4, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "setally", { 0x1079, "SetAlly", "SetAlly Sets a friend/ally relationship between two factions. It is not called on a reference.", FunctionType::Standalone, Type::Reference, 9, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "getcrime",
        { 0x107A, "GetCrime", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "isgreetingplayer",
        { 0x107B, "IsGreetingPlayer", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "startmistersandman",
        { 0x107C, "StartMisterSandMan", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "isguard",
        { 0x107D, "IsGuard", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "startcannibal", { 0x107E, "StartCannibal", "The victim gets cannibalized by the cannibal, which regains some health.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    {
        "hasbeeneaten",
        { 0x107F, "HasBeenEaten", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "getfatiguepercentage",
        { 0x1080, "GetFatiguePercentage", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getpcisclass", { 0x1081, "GetPCIsClass", "Returns 1 if player's class matches a given Class ID.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "getpcisrace", { 0x1082, "GetPCIsRace", "Same as GetIsRace, but only applies to the player. Mainly useful as a condition function.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "getpcissex", { 0x1083, "GetPCIsSex", "This will determine the gender of the player, and run code accordingly", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "getpcinfaction", { 0x1084, "GetPCInFaction", "Returns 1 if Player is a member of the specified Faction.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "samefactionaspc",
        { 0x1085, "SameFactionAsPC", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "sameraceaspc",
        { 0x1086, "SameRaceAsPC", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "samesexaspc",
        { 0x1087, "SameSexAsPC", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "getisreference",
        { 0x1088, "GetIsReference", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "setfactionrank", { 0x1089, "SetFactionRank", "Sets the actor's rank in the specified faction. If the actor is not a member of the faction, adds them to the faction at the new rank.", FunctionType::ReferenceBound, Type::Reference, 2, { { Type::Integer, 0 }, { Type::Integer, 0 } } } },
    { "modfactionrank", { 0x108A, "ModFactionRank", "Modify the actor's rank in the faction by modValue. Note that this has no effect if the actor is not currently in the specified faction. Note also that it will never lower the rank below 0.", FunctionType::Standalone, Type::Reference, 3, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "killactor", { 0x108B, "KillActor", "KillActor kills the calling actor and takes three optional parameters to set who killed it, which limb to dismember, and the cause of death.  See GetCauseofDeath for death values.", FunctionType::ReferenceBound, Type::Reference, 4, { { Type::Reference, 0 }, { Type::Integer, 0 }, { Type::Integer, 0 }, { Type::Reference, 0 } } } },
    { "resurrectactor", { 0x108C, "ResurrectActor", "Resurrects an actor from the dead or unconscious state.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "istalking", { 0x108D, "IsTalking", "Returns 1 if the actor is currently talking.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getwalkspeed", { 0x108E, "GetWalkSpeed", "Returns the actor's walk speed", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getcurrentaiprocedure", { 0x108F, "GetCurrentAIProcedure", "Returns the current AI procedure an actor is performing.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "gettrespasswarninglevel", { 0x1090, "GetTrespassWarningLevel", "GetTrespassWarningLevel returns the number of warnings an actor on a Guard Package (or responding to trespassing or responding to an aggro radius violation) has given the specified reference.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "istrespassing", { 0x1091, "IsTrespassing", "Returns 1 if the actor is currently trespassing.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "isinmyownedcell", { 0x1092, "IsInMyOwnedCell", "Returns 1 if the calling actor is in a cell that she owns.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getwindspeed", { 0x1093, "GetWindSpeed", "Returns wind speed of current weather (ranges from 0.0 to 1.0, as set on the Weather type in the editor).", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "getcurrentweatherpercent", { 0x1094, "GetCurrentWeatherPercent", "Returns a value from 0.0 to 1.0. Anything between 0 and 1 means current weather is in transition.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "getiscurrentweather", { 0x1095, "GetIsCurrentWeather", "Returns 1 if the current weather is active", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "iscontinuingpackagepcnear", { 0x1096, "IsContinuingPackagePCNear", "Returns 1 if the calling actor is currently being prevented from switching packages because its current package has the 'Continue if PC near' flag checked, i.e. the actor wants to switch to a new package but can't because the player is in the same cell.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "addscriptpackage", { 0x1097, "AddScriptPackage", "Add a script package to the calling actor.  This package takes precedence over all other packages until it is done.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "removescriptpackage", { 0x1098, "RemoveScriptPackage", "Removes the currently running script package from the calling actor.  Only necessary if you added a script package with AddScriptPackage and it was set to run indefinitely. When the script package is removed, the actor will automatically choose a new package.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    {
        "canhaveflames",
        { 0x1099, "CanHaveFlames", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "hasflames",
        { 0x109A, "HasFlames", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "addflames",
        { 0x109B, "AddFlames", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "removeflames",
        { 0x109C, "RemoveFlames", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getopenstate", { 0x109D, "GetOpenState", "Gets the open state of an animating door", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "movetomarker",
        { 0x109E, "MoveToMarker", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getsitting", { 0x109F, "GetSitting", "GetSitting returns a value based on the calling actors current sitting state.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    {
        "getfurnituremarkerid",
        { 0x10A0, "GetFurnitureMarkerID", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getiscurrentpackage", { 0x10A1, "GetIsCurrentPackage", "Returns 1 if the actor is currently running the specified package, 0 otherwise.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Integer, 0 } } } },
    { "iscurrentfurnitureref", { 0x10A2, "IsCurrentFurnitureRef", "Returns 1 if an NPC is sitting on this furniture reference.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "iscurrentfurnitureobj", { 0x10A3, "IsCurrentFurnitureObj", "Returns 1 if an NPC is sitting on a furniture reference of the specified furniture type.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "setsize",
        { 0x10A4, "SetSize", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "removeme", { 0x10A5, "RemoveMe", "Removes an object of the object's type from the inventory of the container that it is in (if applicable). If TargetContainerID is specified, a copy of the object is moved to the target container.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "dropme", { 0x10A6, "DropMe", "Drops the calling item from its container. If it is not currently in a container, the function will have no effect.", FunctionType::Standalone, Type::Reference, 0, {} } },
    { "getfactionreaction", { 0x10A7, "GetFactionReaction", "Returns the disposition modifier between two factions.", FunctionType::Standalone, Type::Integer, 0, {} } },
    {
        "setfactionreaction",
        { 0x10A8, "SetFactionReaction", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "modfactionreaction",
        { 0x10A9, "ModFactionReaction", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "getdayofweek",
        { 0x10AA, "GetDayOfWeek", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "ignorecrime", { 0x10AB, "IgnoreCrime", "IgnoreCrime Prevents an NPC from attacking or reporting a player for crime.", FunctionType::ReferenceBound, Type::Reference, 3, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "gettalkedtopcparam", { 0x10AC, "GetTalkedToPCParam", "Returns 1 if the NPC has ever spoken to the player, 0 otherwise. Functionally identical to GetTalkedToPC but an NPC is passed as an argument instead of using a calling reference.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "removeallitems", { 0x10AD, "RemoveAllItems", "Removes all items from the calling reference's inventory.", FunctionType::ReferenceBound, Type::Reference, 3, { { Type::Reference, 0 }, { Type::Integer, 0 }, { Type::Integer, 0 } } } },
    { "wakeuppc", { 0x10AE, "WakeUpPC", "Manually closes the sleep menu (as if the player had pressed the Cancel button).", FunctionType::Standalone, Type::Reference, 0, {} } },
    { "ispcsleeping", { 0x10AF, "IsPCSleeping", "Returns 1 if the player is currently sleeping in bed (not waiting).", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "ispcamurderer", { 0x10B0, "IsPCAMurderer", "Returns 1 if the player has ever murdered an NPC.", FunctionType::Standalone, Type::Integer, 0, {} } },
    {
        "setcombatstyle",
        { 0x10B1, "SetCombatStyle", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "playsound3d",
        { 0x10B2, "PlaySound3D", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "selectplayerspell",
        { 0x10B3, "SelectPlayerSpell", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getdetectionlevel", { 0x10B4, "GetDetectionLevel", "Used to check the current detection level for the calling actor for the TargetActor.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Integer, 0 } } } },
    { "isactordetected", { 0x10B5, "IsActorDetected", "Returns 1 if the calling actor is currently detected by any other actor, and returns 0 if the calling actor is not currently detected by any other actor.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getequipped", { 0x10B6, "GetEquipped", "Checks whether or not the calling actor has equipped the target object.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Integer, 0 } } } },
    { "wait", { 0x10B7, "Wait", "Tells an actor to go into 'wait' behavior for the specified package. Works only if PackageID is the actor's current package, and if the current package is a Follow or Accompany package.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "stopwaiting", { 0x10B8, "StopWaiting", "Tells an actor to resume normal package behavior after being put into a 'wait' state by the Wait command.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "isswimming", { 0x10B9, "IsSwimming", "Returns 1 if the calling actor is swimming, and 0 if the calling actor is not swimming.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "scripteffectelapsedseconds", { 0x10BA, "ScriptEffectElapsedSeconds", "Available only in Effect Scripts. Returns seconds elapsed since the last magic effect update. This will only return a value greater than 0 inside a ScriptEffectUpdate block (but it will compile without error in other block types).", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "setcellpublicflag",
        { 0x10BB, "SetCellPublicFlag", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getpcsleephours", { 0x10BC, "GetPCSleepHours", "Returns the number of hours the player has set to sleep from the menu. Returns 0 if the player is not sleeping.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "setpcsleephours", { 0x10BD, "SetPCSleepHours", "Manually forces the player to sleep the specified number of hours.", FunctionType::Standalone, Type::Reference, 1, { { Type::Integer, 0 } } } },
    {
        "getamountsoldstolen",
        { 0x10BE, "GetAmountSoldStolen", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "modamountsoldstolen",
        { 0x10BF, "ModAmountSoldStolen", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getignorecrime", { 0x10C0, "GetIgnoreCrime", "GetIgnoreCrime returns 1 if the actor is currently ignoring crime.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    {
        "getpcexpelled",
        { 0x10C1, "GetPCExpelled", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "setpcexpelled", { 0x10C2, "SetPCExpelled", "Expels the player from the specified faction, and sets the 'expelled' flag to true (see GetPCExpelled). If the player is in a faction-owned cell, he will be moved outside through the nearest door.", FunctionType::Standalone, Type::Reference, 0, {} } },
    {
        "getpcfactionmurder",
        { 0x10C3, "GetPCFactionMurder", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "setpcfactionmurder",
        { 0x10C4, "SetPCFactionMurder", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "getpcenemyoffaction",
        { 0x10C5, "GetPCEnemyofFaction", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "setpcenemyoffaction",
        { 0x10C6, "SetPCEnemyofFaction", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "getpcfactionattack",
        { 0x10C7, "GetPCFactionAttack", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "setpcfactionattack",
        { 0x10C8, "SetPCFactionAttack", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "unusedfunction21",
        { 0x10C9, "UnusedFunction21", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "unusedfunction22",
        { 0x10CA, "UnusedFunction22", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getdestroyed", { 0x10CB, "GetDestroyed", "Returns 1 when called on a Destroyed reference and 0 for all others.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "setdestroyed", { 0x10CC, "SetDestroyed", "SetDestroyed takes an int parameter. A 1 parameter marks the ref as destroyed, a 0 parameter clears the destroyed flag on the ref. ", FunctionType::Standalone, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getactionref", { 0x10CD, "GetActionRef", "Returns the reference currently interacting with the scripted object. It will only return a value during the frame after the object has been interacted with. This means it is generally only useful inside an OnActivate, OnTriggerEnter, OnTriggerLeave or OnTrigger block. If more than one object is interacting with the object (for instance, several objects colliding with the same trigger zone), only the most recently interacting object will be returned by this function.", FunctionType::ReferenceBound, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getself", { 0x10CE, "GetSelf", "Returns the RefID of the calling reference.  GetSelf is only useful when this information is accessed externally, or when the scripted reference's RefID needs to be passed as a parameter to a function like PushActorAway", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "getcontainer",
        { 0x10CF, "GetContainer", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getforcerun", { 0x10D0, "GetForceRun", "Returns 1 if the actor is currently in a force run state.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "setforcerun",
        { 0x10D1, "SetForceRun", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getforcesneak", { 0x10D2, "GetForceSneak", "Returns 1 if actor is in a force sneak state.", FunctionType::Standalone, Type::Reference, 0, {} } },
    { "setforcesneak", { 0x10D3, "SetForceSneak", "Turns force sneak on or off.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "advancepcskill",
        { 0x10D4, "AdvancePCSkill", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "advancepclevel", { 0x10D5, "AdvancePCLevel", "Advances the player character's level.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "hasmagiceffect",
        { 0x10D6, "HasMagicEffect", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "getdefaultopen",
        { 0x10D7, "GetDefaultOpen", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "setdefaultopen", { 0x10D8, "SetDefaultOpen", "SetDefaultOpen sets the default open state for an object. (The equivalent of using the 'Open By Default' checkbox on a reference.)", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "showclassmenu",
        { 0x10D9, "ShowClassMenu", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "showracemenu", { 0x10DA, "ShowRaceMenu", "No parameters. Brings up the 'Gene Projector' (Fallout 3) or 'Reflectron' (Fallout New Vegas) menu which allows the player to select sex, race, face, and hair.", FunctionType::Standalone, Type::Reference, 0, {} } },
    { "getanimaction", { 0x10DB, "GetAnimAction", "GetAnimAction is a script function and condition to see what special animation action an actor is currently doing.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "shownamemenu", { 0x10DC, "ShowNameMenu", "Displays the menu that allows the player to change her/his name.", FunctionType::Standalone, Type::Reference, 0, {} } },
    { "setopenstate", { 0x10DD, "SetOpenState", "Sets the open state of a door to open or closed.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Integer, 0 } } } },
    {
        "unusedfunction26",
        { 0x10DE, "UnusedFunction26", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "isspelltarget", { 0x10DF, "IsSpellTarget", "Returns 1 if the calling reference is currently being affected by the specified magic item (an Actor Effect (spell), an Object Effect (enchantment), or an Ingestible (drug, potion, chem)).", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getvatsmode", { 0x10E0, "GetVATSMode", "GetVATSMode returns the player's current VATS view:", FunctionType::Standalone, Type::Reference, 0, {} } },
    {
        "getpersuasionnumber",
        { 0x10E1, "GetPersuasionNumber", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getsandman", { 0x10E2, "GetSandman", "Returns whether the actor is currently performing a Sandman action. This relates to the Mister Sandman perk which allows the player to silently kill NPCs when they're sleeping.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getcannibal", { 0x10E3, "GetCannibal", "Returns True (1) if the calling actor is currently playing the cannibal animation.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "getisclassdefault",
        { 0x10E4, "GetIsClassDefault", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "getclassdefaultmatch",
        { 0x10E5, "GetClassDefaultMatch", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getincellparam", { 0x10E6, "GetInCellParam", "Returns true if the specified ref is in the given cell.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "setinchargen", { 0x10E7, "SetInChargen", "Sets the player into a 'character generation' state. While in this state, the player will not level up (although XP will accumulate as usual). When the player leaves this state, the appropriate number of levels will be immediately awarded.", FunctionType::Standalone, Type::Reference, 0, {} } },
    { "getcombattarget", { 0x10E8, "GetCombatTarget", "Returns the calling actor's current combat target.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "getpackagetarget", { 0x10E9, "GetPackageTarget", "Returns the calling actor's current package target (if any).", FunctionType::ReferenceBound, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "showspellmaking",
        { 0x10EA, "ShowSpellMaking", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getvatstargetheight", { 0x10EB, "GetVatsTargetHeight", "GetVatsTargetHeight Returns the delta z from the player to the targeted limb or bounding volume center point.", FunctionType::Standalone, Type::Reference, 0, {} } },
    {
        "setghost",
        { 0x10EC, "SetGhost", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getisghost", { 0x10ED, "GetIsGhost", "Returns 1 if the actor is in the 'ghost' state.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "equipitem",
        { 0x10EE, "EquipItem", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "unequipitem", { 0x10EF, "UnequipItem", "UnequipItem forces an actor to unequip an item.", FunctionType::ReferenceBound, Type::Reference, 3, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "setclass", { 0x10F0, "SetClass", "SetClass Changes the class of the actor to the Classname. An autocalc is performed, if and only if the checkbox is marked for the actor. It is called on a reference.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "setunconscious", { 0x10F1, "SetUnconscious", "Turns an actor's conscious behavior on or off.  Actors that are unconscious will not use AI behavior and will not play idle sounds.  When an unconscious actor is activated, a message stating that the actor is unconscious will appear.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Integer, 0 } } } },
    { "getunconscious", { 0x10F2, "GetUnconscious", "Returns 1 if the actor has been set to an unconscious state using the SetUnconscious function.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "setrestrained",
        { 0x10F3, "SetRestrained", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getrestrained", { 0x10F4, "GetRestrained", "Returns 1 if the actor has been set to a restrained state using SetRestrained and 0 otherwise", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "forceflee", { 0x10F5, "ForceFlee", "Causes the actor to analyze its surroundings for potential threats, and flee if a threat is found.", FunctionType::ReferenceBound, Type::Reference, 4, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getisuseditem", { 0x10F6, "GetIsUsedItem", "GetIsUsedItem checks if an actor is using a specified item, returning 1 if they match.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "getisuseditemtype", { 0x10F7, "GetIsUsedItemType", "Checks if an item that matches a  Form Type is currently being used or activated, returning 1 if it does.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Integer, 0 } } } },
    {
        "unusedfunction9",
        { 0x10F8, "UnusedFunction9", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "unusedfunction10",
        { 0x10F9, "UnusedFunction10", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "unusedfunction11",
        { 0x10FA, "UnusedFunction11", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "unusedfunction12",
        { 0x10FB, "UnusedFunction12", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "unusedfunction13",
        { 0x10FC, "UnusedFunction13", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "unusedfunction14",
        { 0x10FD, "UnusedFunction14", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "getisplayablerace",
        { 0x10FE, "GetIsPlayableRace", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getoffersservicesnow", { 0x10FF, "GetOffersServicesNow", "Returns 1 if the calling actor offers services in his current package.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getgamesetting", { 0x1100, "GetGameSetting", "Returns the value of a game setting", FunctionType::Standalone, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "stopcombatalarmonactor", { 0x1101, "StopCombatAlarmOnActor", "StopCombatAlarmOnActor Ends the fighting flag for all enemies targeting the specified actor.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    {
        "getuseditemlevel",
        { 0x1102, "GetUsedItemLevel", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getuseditemactivate", { 0x1103, "GetUsedItemActivate", "Returns true if the actor is using/activating an item(?)", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "setweather", { 0x1104, "SetWeather", "Changes weather using the games normal switching to the specified weather. The transition time is effected by the Trans Delta setting of the weather or if SetWeatherTransitionTimeOverride has been used to extend the vanilla maximum of 30 seconds.  If OverrideWeatherFlag is 1, the weather will not change again until ReleaseWeatherOverride is called. Otherwise, the weather will change back in the normal fashion according to the weather system.", FunctionType::Standalone, Type::Reference, 3, { { Type::Reference, 0 }, { Type::Integer, 0 }, { Type::Reference, 0 } } } },
    {
        "forcetakecover",
        { 0x1105, "ForceTakeCover", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "modbartergold",
        { 0x1106, "ModBarterGold", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "setbartergold",
        { 0x1107, "SetBarterGold", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "getbartergold",
        { 0x1108, "GetBarterGold", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "istimepassing", { 0x1109, "IsTimePassing", "Returns 1 if the player is sleeping, waiting, or traveling (i.e. time is passing while in menu mode).", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "ispleasant", { 0x110A, "IsPleasant", "Returns 0 if the current weather is not classified as pleasant. Greater than 0 and less than 1 means the weather is transitioning to a pleasant weather. 1 means that the weather is stable and pleasant.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "iscloudy", { 0x110B, "IsCloudy", "Returns 0 if the current weather is not classified as cloudy. Greater than 0 and less than 1 means the weather is transitioning to a cloudy weather. 1 means that the weather is stable and cloudy.", FunctionType::Standalone, Type::Integer, 0, {} } },
    {
        "trapupdate",
        { 0x110C, "TrapUpdate", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "setquestobject",
        { 0x110D, "SetQuestObject", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "forceactorvalue", { 0x110E, "ForceActorValue", "ForceActorValue modifies the current stat to the specified value (not to be confused with SetActorValue, which changes the BASE value of the stat).", FunctionType::ReferenceBound, Type::Reference, 3, { { Type::Integer, 0 }, { Type::Integer, 0 }, { Type::Reference, 0 } } } },
    {
        "modpcskill",
        { 0x110F, "ModPCSkill", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "modpcattribute",
        { 0x1110, "ModPCAttribute", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "enablefasttravel", { 0x1111, "EnableFastTravel", "Enable or disable fast travel manually: 1 = allowed, 0 = disabled until reenabled by this function.", FunctionType::Standalone, Type::Reference, 4, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getarmorratingupperbody", { 0x1112, "GetArmorRatingUpperBody", "Link to TES4 Construction Set Wiki: GetArmorRatingUpperBody.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getparentref", { 0x1113, "GetParentRef", "Returns the enable parent reference, as set in the Enable Parent tab of the Reference dialog. A reference with an enable parent will disable/enable in accordance with its parent", FunctionType::ReferenceBound, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "playbink", { 0x1114, "PlayBink", "PlayBink opens a Bink video file.", FunctionType::ReferenceBound, Type::Reference, 11, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "getbaseactorvalue",
        { 0x1115, "GetBaseActorValue", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "isowner", { 0x1116, "IsOwner", "Returns 1 if the calling object is owned by the specified faction/NPC. This only checks actual ownership on the reference not the inherited ownership from the cell. If called without parameter, IsOwner returns 1 if the calling object is owned by the player. Note that IsOwner returns 0 if the owner is set to NONE, so it cannot be used to detect public ownership.", FunctionType::ReferenceBound, Type::Integer, 3, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "setownership", { 0x1117, "SetOwnership", "Sets the ownership of the calling reference to the specified NPC or Faction.  If the parameter is omitted, the reference will be set to be owned by the player.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Integer, 0 } } } },
    { "iscellowner", { 0x1118, "IsCellOwner", "Returns 1 if the specified cell is owned by the specified NPC or Faction. If the second parameter is left blank, the function returns 1 if the cell is owned by the player.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 } } } },
    {
        "setcellownership",
        { 0x1119, "SetCellOwnership", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "ishorsestolen",
        { 0x111A, "IsHorseStolen", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "setcellfullname", { 0x111B, "SetCellFullName", "Changes the cell's display name to the title text of the specified message. This is what will appear on load doors leading into the cell, as well as on the local map.", FunctionType::Standalone, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "setactorfullname",
        { 0x111C, "SetActorFullName", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "isleftup", { 0x111D, "IsLeftUp", "Idle manager function, returns 1 if the quadruped is knocked down with its left side facing up.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "issneaking", { 0x111E, "IsSneaking", "Returns 1 if the actor is sneaking (crouched).", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "isrunning", { 0x111F, "IsRunning", "Returns 1 if the actor is currently running.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getfriendhit", { 0x1120, "GetFriendHit", "Returns the number of friendly hits made by the target actor on the calling actor.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Integer, 0 } } } },
    { "isincombat", { 0x1121, "IsInCombat", "Returns 1 if the calling actor is currently in combat, and 0 otherwise.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "setpackduration",
        { 0x1122, "SetPackDuration", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "playmagicshadervisuals", { 0x1123, "PlayMagicShaderVisuals", "Plays the EffectShader visuals on the calling reference. Visuals will play at least one cycle, regardless of duration, and if no duration is specified they play indefinitely or until the art stops animating.", FunctionType::Standalone, Type::Reference, 4, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "playmagiceffectvisuals", { 0x1124, "PlayMagicEffectVisuals", "Plays the effect visuals on the calling reference. Visuals will play at least one cycle, regardless of duration, and if no duration is specified they play indefinitely or until the art stops animating.", FunctionType::Standalone, Type::Reference, 4, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "stopmagicshadervisuals", { 0x1125, "StopMagicShaderVisuals", "Stops playing the specified effect shader.", FunctionType::ReferenceBound, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "stopmagiceffectvisuals", { 0x1126, "StopMagicEffectVisuals", "Stops playing the specified magic effect visual.", FunctionType::Standalone, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "resetinterior",
        { 0x1127, "ResetInterior", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "isanimplaying", { 0x1128, "IsAnimPlaying", "Returns a 1 if the calling object is currently playing an animation. When the optional AnimGroup parameter is passed, script function returns 1 only if the specified Animation Group is playing.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 } } } },
    { "setactoralpha", { 0x1129, "SetActorAlpha", "Sets the actor's alpha value (how transparent they are).", FunctionType::ReferenceBound, Type::Reference, 6, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "enablelinkedpathpoints",
        { 0x112A, "EnableLinkedPathPoints", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "disablelinkedpathpoints",
        { 0x112B, "DisableLinkedPathPoints", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "isininterior", { 0x112C, "IsInInterior", "Returns 1 if the calling reference is in an interior cell", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "forceweather", { 0x112D, "ForceWeather", "Forces the weather to immediately switch to the specified weather, skipping the normal transition period set by the Trans Delta. If OverrideWeatherFlag is 1, the weather will not change again until ReleaseWeatherOverride is called. Otherwise, the weather will change back in the normal fashion according to the weather system.", FunctionType::Standalone, Type::Reference, 3, { { Type::Reference, 0 }, { Type::Integer, 0 }, { Type::Reference, 0 } } } },
    {
        "toggleactorsai",
        { 0x112E, "ToggleActorsAI", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "isactorsaioff",
        { 0x112F, "IsActorsAIOff", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "iswaterobject",
        { 0x1130, "IsWaterObject", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "unusedfunction15",
        { 0x1131, "UnusedFunction15", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "isactorusingatorch",
        { 0x1132, "IsActorUsingATorch", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "setlevel", { 0x1133, "SetLevel", "In theory, if the LevelToPCFlag is set to 1 then the level provided is an offset to the player's level, which will not take their level above or below the provided maximum and minimum levels. In practise, the function does not work correctly when called on NPCs- SetLevel will often (if not always) set their level to the provided MinLevel, disregarding any level offset, maximum or anything else. ", FunctionType::Standalone, Type::Reference, 6, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "resetfalldamagetimer",
        { 0x1134, "ResetFallDamageTimer", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "isxbox", { 0x1135, "IsXBox", "Returns 1 if the game is running on the XBox.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "getinworldspace", { 0x1136, "GetInWorldspace", "Returns 1 if the actor is currently in one of the exterior cells of the specified worldspace. Always returns 0 if the actor is in an interior cell.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "modpcmiscstat", { 0x1137, "ModPCMiscStat", "ModPCMiscStat allows you to modify any of the player's miscellaneous stats.", FunctionType::Standalone, Type::Reference, 2, { { Type::Integer, 0 }, { Type::Integer, 0 } } } },
    {
        "getpcmiscstat",
        { 0x1138, "GetPCMiscStat", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "isactorevil",
        { 0x1139, "IsActorEvil", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "isactoravictim",
        { 0x113A, "IsActorAVictim", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "gettotalpersuasionnumber",
        { 0x113B, "GetTotalPersuasionNumber", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "setscale",
        { 0x113C, "SetScale", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "modscale",
        { 0x113D, "ModScale", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "getidledoneonce",
        { 0x113E, "GetIdleDoneOnce", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "killallactors", { 0x113F, "KillAllActors", "Kills all actors in the loaded area -- in an exterior, the 5x5 cells around the player; in an interior, the cell that the player is currently in.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "getnorumors",
        { 0x1140, "GetNoRumors", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "setnorumors",
        { 0x1141, "SetNoRumors", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "dispel", { 0x1142, "Dispel", "Removes specified Actor Effect that is affecting an actor.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "whichservicemenu",
        { 0x1143, "WhichServiceMenu", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "triggerhitshader", { 0x1144, "TriggerHitShader", "Used to manually trigger the 'hit shader' effect of blurring the screen (normally used when the player is staggered). Commonly used in traps, other 'earth shaking' activators, and inebriation effects. ", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "functionunused16",
        { 0x1145, "FunctionUnused16", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "reset3dstate",
        { 0x1146, "Reset3DState", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "isridinghorse",
        { 0x1147, "IsRidingHorse", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "dispelallspells", { 0x1148, "DispelAllSpells", "Removes all current spells/magic that are effecting an actor.", FunctionType::Standalone, Type::Reference, 0, {} } },
    {
        "unusedfunction17",
        { 0x1149, "UnusedFunction17", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "addachievement", { 0x114A, "AddAchievement", "As opposed to Oblivion, this function actually is useful (somewhat) in Fallout 3, thanks to Windows Live.  However, Achievements can't be changed, so there's probably not much point to using this in a mod other than to bump up gamerscores.", FunctionType::Standalone, Type::Reference, 1, { { Type::Integer, 0 } } } },
    { "duplicateallitems", { 0x114B, "DuplicateAllItems", "Duplicates all items into the target container. Any scripted item will be duplicated almost identically:", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "isindangerouswater",
        { 0x114C, "IsInDangerousWater", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "essentialdeathreload", { 0x114D, "EssentialDeathReload", "Force reload of the game (same as when the player dies). The message will appear first, then the reload menu.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "setshowquestitems",
        { 0x114E, "SetShowQuestItems", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "duplicatenpcstats",
        { 0x114F, "DuplicateNPCStats", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "resethealth", { 0x1150, "ResetHealth", "ResetHealth Restores the actors health and cures crippling damage.  It is called on a reference.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "setignorefriendlyhits", { 0x1151, "SetIgnoreFriendlyHits", "Set to 1 so actor will ignore friendly hits. Set to 0 to clear the condition.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "getignorefriendlyhits", { 0x1152, "GetIgnoreFriendlyHits", "Returns 1 if actor is ignoring friendly hits.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    {
        "isplayerslastriddenhorse",
        { 0x1153, "IsPlayersLastRiddenHorse", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "setactorrefraction",
        { 0x1154, "SetActorRefraction", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "setitemvalue",
        { 0x1155, "SetItemValue", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "setrigidbodymass", { 0x1156, "SetRigidBodyMass", "Sets the mass of an object, which determines how much it moves when it is bumped into or hit with a weapon.  Valid values are 0-100, 100 being no movement.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Integer, 0 } } } },
    {
        "showviewerstrings",
        { 0x1157, "ShowViewerStrings", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "releaseweatheroverride",
        { 0x1158, "ReleaseWeatherOverride", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "setallreachable", { 0x1159, "SetAllReachable", "This is one of 4 functions which can be used to increase the game's performance in situations where many actors are in combat or otherwise doing complex pathing. Note that the flag is cleared every frame, so this function needs to be called in a script running on a reference in the loaded area.", FunctionType::Standalone, Type::Reference, 1, { { Type::Integer, 0 } } } },
    { "setallvisible", { 0x115A, "SetAllVisible", "This is one of 4 functions which can be used to increase the game's performance in situations where many actors are in combat or otherwise doing complex pathing. Note that the flag is cleared every frame, so this function needs to be called in a script running on a reference in the loaded area.", FunctionType::Standalone, Type::Reference, 1, { { Type::Integer, 0 } } } },
    { "setnoavoidance", { 0x115B, "SetNoAvoidance", "This is one of 4 functions which can be used to increase the game's performance in situations where many actors are in combat or otherwise doing complex pathing. Note that the flag is cleared every frame, so this function needs to be called in a script running on a reference in the loaded area.", FunctionType::Standalone, Type::Reference, 1, { { Type::Integer, 0 } } } },
    {
        "sendtrespassalarm",
        { 0x115C, "SendTrespassAlarm", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "setsceneiscomplex", { 0x115D, "SetSceneIsComplex", "This function is used to simplify processing during complex scenes involving many actors in combat. As such it needs to be used carefully and only under controlled circumstances, as it significantly changes the behavior of the game while it is set.", FunctionType::Standalone, Type::Reference, 1, { { Type::Integer, 0 } } } },
    { "autosave", { 0x115E, "Autosave", "Forces the game to autosave over the current autosave slot.", FunctionType::Standalone, Type::Reference, 0, {} } },
    {
        "startmasterfileseekdata",
        { 0x115F, "StartMasterFileSeekData", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "dumpmasterfileseekdata",
        { 0x1160, "DumpMasterFileSeekData", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "isactor", { 0x1161, "IsActor", "Returns 1 if the calling reference is an Actor (a Creature or NPC)", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "isessential", { 0x1162, "IsEssential", "Returns 1 if the calling actor is flagged as essential.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "preloadmagiceffect",
        { 0x1163, "PreloadMagicEffect", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "showdialogsubtitles",
        { 0x1164, "ShowDialogSubtitles", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "unusedfunction27",
        { 0x1165, "UnusedFunction27", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "isplayermovingintonewspace", { 0x1166, "IsPlayerMovingIntoNewSpace", "Returns 1 if the player is in the process of moving into a new space, i.e. fast traveling or moving through a load door.", FunctionType::Standalone, Type::Integer, 0, {} } },
    {
        "unusedfunction28",
        { 0x1167, "UnusedFunction28", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "unusedfunction29",
        { 0x1168, "UnusedFunction29", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "gettimedead", { 0x1169, "GetTimeDead", "Returns how long (in hours) the actor has been dead.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "getplayerhaslastriddenhorse",
        { 0x116A, "GetPlayerHasLastRiddenHorse", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getlinkedref", { 0x116B, "GetLinkedRef", "GetLinkedRef   gives the reference that is currently linked to the current reference. For example, if a switch opens a door, you can link the switch to the door and if the switch is activated you get the door reference and activate it. It is called on a reference and takes no parameters.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "damageobject", { 0x116C, "DamageObject", "Applies damage to a destructible object which is not already destroyed. Does not work for objects which have health (such as weapons). It is called on a reference and takes a float which is the amount of damage to apply.", FunctionType::ReferenceBound, Type::Reference, 2, { { Type::Integer, 0 }, { Type::Reference, 0 } } } },
    { "ischild", { 0x116D, "IsChild", "Returns 1 if the Actor is a child.  It is called on a reference and has no parameters.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "unusedfunction1",
        { 0x116E, "UnusedFunction1", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getlastplayeraction", { 0x116F, "GetLastPlayerAction", "Returns the index of the last action performed by the player.", FunctionType::Standalone, Type::Integer, 0, {} } },
    {
        "isplayeractionactive",
        { 0x1170, "IsPlayerActionActive", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "settalkingactivatoractor", { 0x1171, "SetTalkingActivatorActor", "SetTalkingActivatorActor  Sets the actor whose dialogue should be used for a talking activator object.  It is called on a talking activator reference (a computer) and an optional parameter which is the actor who is 'talking' through the activator. If no actor is passed in then the talking activator reverts its normal talking behavior.", FunctionType::ReferenceBound, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "istalkingactivatoractor", { 0x1172, "IsTalkingActivatorActor", "Tests to see if the talking activator is using an actor to speak. It is called on a Reference and takes one parameter, the actor you are testing.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "showbartermenu", { 0x1173, "ShowBarterMenu", "ShowBarterMenu  Displays the Barter Menu. It is not called on a Reference and can take 1 parameter.  The parameter is in the range [ -100, 100 ] and denotes the percentage of discount on Sell prices / inflation on Buy prices.  See examples below.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "isinlist", { 0x1174, "IsInList", "Returns True (1) if the calling reference's base object is contained in the specified FormList.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "unusedfunction18",
        { 0x1175, "UnusedFunction18", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "addperk", { 0x1176, "AddPerk", "Increments the rank of the specified perk on an Actor.  If the specified Actor doesn't already have the perk, then it will be added with rank 1.  Has no effect on any Actor other than the Player (NPCs cannot have perks, and see Notes regarding companions).", FunctionType::ReferenceBound, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Integer, 0 } } } },
    { "rewardxp", { 0x1177, "RewardXP", "RewardXP Awards Experience Points (XP) to the player.  It is not called on a reference and the parameter is an integer which represents the amount of XP to add to the player.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "showhackingminigame", { 0x1178, "ShowHackingMiniGame", "Opens calling Terminal reference with hacking minigame.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    {
        "showsurgerymenu",
        { 0x1179, "ShowSurgeryMenu", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "showrepairmenu", { 0x117A, "ShowRepairMenu", "Opens the repair menu so that the player may repair their equipment by paying caps.  The repair skill of the calling actor will be used, and any caps spent will be added to that actor's inventory.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "functionunused19",
        { 0x117B, "FunctionUnused19", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "addnote", { 0x117C, "AddNote", "Adds a note to the players note inventory. It is not called on a Reference and it takes one parameter, the note to add.", FunctionType::Standalone, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "removenote", { 0x117D, "RemoveNote", "RemoveNote Removes a note from the players note inventory. It is not called on a Reference and it takes one parameter, the note to remove.", FunctionType::Standalone, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "gethasnote", { 0x117E, "GetHasNote", "GetHasNote Tests if the player has a note in his note inventory. It is not called on a Reference and it takes one parameter, the note to test for.  Returns 0 if the note is not there and 1 if it is there.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "addtofaction", { 0x117F, "AddToFaction", "Adds an actor (only the reference not the base object) into a faction. It is called on the Reference and has two parameters: the faction, and the faction rank.", FunctionType::ReferenceBound, Type::Reference, 3, { { Type::Reference, 0 }, { Type::Integer, 0 }, { Type::Reference, 0 } } } },
    { "removefromfaction", { 0x1180, "RemoveFromFaction", "RemoveFromFaction Removes an actor (only the reference not the base object) from a faction. It is called on the Reference and has one parameter: the faction.", FunctionType::ReferenceBound, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "damageactorvalue", { 0x1181, "DamageActorValue", "DamageActorValue is called on a Reference and takes two parameters, an ActorValue and a value. The Function alters the damage modifier of a given actor value. The damage modifier is always a negative number, or zero if there is no damage to the actor value. DamageActorValue will decrease the modifier by the given amount.", FunctionType::ReferenceBound, Type::Reference, 3, { { Type::Integer, 0 }, { Type::Integer, 0 }, { Type::Reference, 0 } } } },
    { "restoreactorvalue", { 0x1182, "RestoreActorValue", "RestoreActorValue is called on a Reference and takes two parameters, an ActorValue and a value. The Function alters the damage modifier of a given actor value. The damage modifier is always a negative number, or zero if there is no damage to the actor value. RestoreActorValue will increase the modifier by the given amount or to 0.", FunctionType::ReferenceBound, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "triggerhudshudder", { 0x1183, "TriggerHUDShudder", "TriggerHUDShudder Triggers shudder effect on HUD.  There are four optional parameters for intensity and duration.", FunctionType::Standalone, Type::Reference, 6, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "setdisposition", { 0x1184, "SetDisposition", "SetDisposition Sets the disposition of the reference it is called on to the actor passed in, to the value given.  Called on a Reference (actor) and parameters are an Actor and an integer.", FunctionType::ReferenceBound, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "showcomputersinterface", { 0x1185, "ShowComputersInterface", "Displays interface of a calling Terminal reference. If a Terminal is locked, hacking minigame will be bypassed.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "setglobaltimemultiplier", { 0x1186, "SetGlobalTimeMultiplier", "SetGlobalTimeMultiplier Sets the time multiplier. 1.0 is standard time, 0.5 is slow mo, and 0.25 is even slower.", FunctionType::Standalone, Type::Reference, 2, { { Type::Integer, 0 }, { Type::Reference, 0 } } } },
    { "gethitlocation", { 0x1187, "GetHitLocation", "Returns the hit location (of the most recent hit?).", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "ispc1stperson", { 0x1188, "IsPC1stPerson", "Returns 1 if the camera is in 1st person view, and returns 0 if the camera is in 3rd person view.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "purgecellbuffers", { 0x1189, "PurgeCellBuffers", "Forcibly unloads all unattached cells in cell buffers.", FunctionType::Standalone, Type::Reference, 0, {} } },
    { "pushactoraway", { 0x118A, "PushActorAway", "PushActorAway Knocks down (ragdolls) one actor and pushes it away from another with a given force.", FunctionType::Standalone, Type::Reference, 3, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "setactorsai", { 0x118B, "SetActorsAI", "SetActorsAI  turns on and off the processing of an actor in the world.  It is called on a reference and takes one parameter an integer.  If the integer is 0, it turns off the processing and any other integer will turn it on.  Scripts will still run on them but they will not process packages, detection, havok or animation.", FunctionType::ReferenceBound, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "clearownership", { 0x118C, "ClearOwnership", "Clears the ownership from the reference it is called on.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "getcauseofdeath", { 0x118D, "GetCauseofDeath", "*GetCauseofDeath Indicates the cause of death for an actor. It is called on a Reference and has no parameters.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "islimbgone", { 0x118E, "IsLimbGone", "Test to see if an actor has had a particular limb dismembered.  It is called on a reference and takes one parameter which is the limb to check for, and one optional parameter to check several limbs at once.", FunctionType::ReferenceBound, Type::Integer, 3, { { Type::Reference, 0 }, { Type::Integer, 0 }, { Type::Integer, 0 } } } },
    { "isweaponinlist", { 0x118F, "IsWeaponInList", "Checks if the calling actor's currently equipped weapon is in the specified FormList.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "playidle", { 0x1190, "PlayIdle", "PlayIdle causes the calling actor to play a specified idle animation.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Integer, 0 } } } },
    { "applyimagespacemodifier", { 0x1191, "ApplyImageSpaceModifier", "ApplyImageSpaceModifier will play the specified ImageSpace Modifier.", FunctionType::Standalone, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "removeimagespacemodifier", { 0x1192, "RemoveImageSpaceModifier", "RemoveImageSpaceModifier will remove the specified ImageSpace Modifier.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "hasfrienddisposition", { 0x1193, "HasFriendDisposition", "*HasFriendDisposition function returns 1 if the actor who it is called on is equal or greater to the friend disposition game setting. It is called on a Reference and takes no parameters. It is also a Condition Function.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    {
        "functionunused20",
        { 0x1194, "FunctionUnused20", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "frienddispositionboost", { 0x1195, "FriendDispositionBoost", "FriendDispositionBoost function will mod the disposition of the actor so it will reach a friend level with the player. It is called on a Reference and has no parameters.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "setcellimagespace", { 0x1196, "SetCellImageSpace", "Changes the ImageSpace of a cell.", FunctionType::Standalone, Type::Reference, 2, { { Type::Integer, 0 }, { Type::Integer, 0 } } } },
    {
        "showchargenmenu",
        { 0x1197, "ShowChargenMenu", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "getvatsvalue",
        { 0x1198, "GetVATSValue", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "iskiller", { 0x1199, "IsKiller", "Returns 1 if the calling Actor was killed by the specified Actor", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "iskillerobject",
        { 0x119A, "IsKillerObject", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getfactioncombatreaction", { 0x119B, "GetFactionCombatReaction", "Returns the combat reaction type between two factions.", FunctionType::Standalone, Type::Integer, 0, {} } },
    {
        "useweapon",
        { 0x119C, "UseWeapon", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "evaluatespellconditions",
        { 0x119D, "EvaluateSpellConditions", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "togglemotionblur",
        { 0x119E, "ToggleMotionBlur", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "exists", { 0x119F, "Exists", "In Combat Dialogue, the target of the conversation is a group member nearby the speaking actor. If no group members are nearby, the target of the conversation is the speaker himself. Because of this, there is a new condition function called the Exists condition function.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getgroupmembercount", { 0x11A0, "GetGroupMemberCount", "GetGroupMemberCount returns the number of members in the actor's combat group. It will return 0 if the reference is not an actor or if the actor is not in combat. A return value of 1 means the actor is in combat but fighting by themselves.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "getgrouptargetcount", { 0x11A1, "GetGroupTargetCount", "GetGroupTargetCount returns the number of targets in the actor's combat group. It will return 0 if the reference is not an actor, the actor is not in combat, or if the actor is in combat but has no targets.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "setobjectivecompleted", { 0x11A2, "SetObjectiveCompleted", "SetObjectiveCompleted Turns a quest objective on or off.", FunctionType::Standalone, Type::Reference, 5, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "setobjectivedisplayed", { 0x11A3, "SetObjectiveDisplayed", "SetObjectiveDisplayed turns a quest objective on or off.", FunctionType::Standalone, Type::Reference, 4, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getobjectivecompleted", { 0x11A4, "GetObjectiveCompleted", "GetObjectiveCompleted Returns 1 if the specified objective is marked as completed, 0 otherwise.", FunctionType::Standalone, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getobjectivedisplayed", { 0x11A5, "GetObjectiveDisplayed", "GetObjectiveDisplayed Returns 1 if the specified objective is currently being displayed, 0 otherwise.", FunctionType::Standalone, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "setimagespace",
        { 0x11A6, "SetImageSpace", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "pipboyradio",
        { 0x11A7, "PipboyRadio", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "removeperk", { 0x11A8, "RemovePerk", "RemovePerk removes a perk from an actor.  It is called on a reference and the parameter is the perk to remove.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "disableallactors",
        { 0x11A9, "DisableAllActors", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getisformtype", { 0x11AA, "GetIsFormType", "GetIsFormType returns 1 if the object is the specified form type.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "getisvoicetype", { 0x11AB, "GetIsVoiceType", "GetIsVoiceType returns 1 if the calling actor has the specified voice type.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "getplantedexplosive",
        { 0x11AC, "GetPlantedExplosive", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "completeallobjectives", { 0x11AD, "CompleteAllObjectives", "Marks all objectives for a quest as completed.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "isactortalkingthroughactivator", { 0x11AE, "IsActorTalkingThroughActivator", "IsActorTalkingThroughActivator Tests if an Actor (reference) is currently talking through an Activator. The Actor (reference) must be set via the SetTalkingActivatorActor function.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "gethealthpercentage", { 0x11AF, "GetHealthPercentage", "GetHealthPercentage Determines how injured an actor is. Health percentage is measured as a value from 0 to 1.0.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "setaudiomultithreading",
        { 0x11B0, "SetAudioMultithreading", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getisobjecttype", { 0x11B1, "GetIsObjectType", "GetIsObjectType returns 1 if the object is the specified form type.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "showchargenmenuparams",
        { 0x11B2, "ShowChargenMenuParams", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "getdialogueemotion",
        { 0x11B3, "GetDialogueEmotion", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "getdialogueemotionvalue",
        { 0x11B4, "GetDialogueEmotionValue", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "exitgame", { 0x11B5, "ExitGame", "ExitGame plays credits and returns the game to the main menu.", FunctionType::Standalone, Type::Reference, 0, {} } },
    { "getiscreaturetype", { 0x11B6, "GetIsCreatureType", "GetIsCreatureType Returns 1 if creature is of the creature type specified (in parameter).", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "setmerchantcontainer", { 0x11B7, "SetMerchantContainer", "SetMerchantContainer assigns a merchant container to an actor.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "removemerchantcontainer", { 0x11B8, "RemoveMerchantContainer", "RemoveMerchantContainer clears an existing merchant container off of an actor.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "showwarning", { 0x11B9, "ShowWarning", "ShowWarning allows a script to display/write a warning.  ", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "entertrigger", { 0x11BA, "EnterTrigger", "EnterTrigger forces an OnTriggerEnter event on the target ref.  Takes one parameter (ActionRef) which is the reference that entered the trigger.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "markfordelete", { 0x11BB, "MarkForDelete", "MarkForDelete allows a script to set the delete flag on a disabled reference. The reference is placed in a queue for deletion a few frames later.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "additemhealthpercent", { 0x11BC, "AddItemHealthPercent", "AddItemHealthPercent adds an item to a container at a specified health percentage.", FunctionType::ReferenceBound, Type::Reference, 4, { { Type::Integer, 0 }, { Type::Integer, 0 }, { Type::Integer, 0 }, { Type::Integer, 0 } } } },
    { "placeatmehealthpercent", { 0x11BD, "PlaceAtMeHealthPercent", "PlaceAtMeHealthPercent places a damaged actor or item in the world.", FunctionType::ReferenceBound, Type::Reference, 5, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getinzone", { 0x11BE, "GetInZone", "GetInZone returns a 1 if the designated target is in the Encounter Zone.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "disablenavmesh",
        { 0x11BF, "DisableNavMesh", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "enablenavmesh", { 0x11C0, "EnableNavMesh", "Enables the specified navmesh.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "hasperk", { 0x11C1, "HasPerk", "If checked in a script, returns 1 if the actor has the specified perk and 0 if not. If checked in console, returns the perk rank.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Integer, 0 } } } },
    { "getfactionrelation", { 0x11C2, "GetFactionRelation", "GetFactionRelation returns the faction relation between two actors.  It is called on a reference.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "islastidleplayed",
        { 0x11C3, "IsLastIdlePlayed", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "setnpcradio", { 0x11C4, "SetNPCRadio", "SetNPCRadio  designates an NPC as a radio.", FunctionType::ReferenceBound, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "setplayerteammate", { 0x11C5, "SetPlayerTeammate", "Changes the actor's behavior to simulate being a combat teammate of the player. The actor will act and react as if he is in the player faction for the purposes of combat. Other actors will treat the actor as is he were in the player faction. The teammate will imitate the player's sneak state. An actor in the teammate state can be activated in combat.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "getplayerteammate", { 0x11C6, "GetPlayerTeammate", "Returns 1 if calling actor is set as a player teammate.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "getplayerteammatecount", { 0x11C7, "GetPlayerTeammateCount", "Returns the current number of actors set as player teammates.", FunctionType::Standalone, Type::Reference, 0, {} } },
    {
        "openteammatecontainer",
        { 0x11C8, "OpenTeammateContainer", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "clearfactionplayerenemyflag", { 0x11C9, "ClearFactionPlayerEnemyFlag", "Clears the enemy flag that gets set when a player commits a major crime against a crime-tracking faction.  See Crime.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "clearactorsfactionsplayerenemyflag", { 0x11CA, "ClearActorsFactionsPlayerEnemyFlag", "Clears the enemy crime flag for a given actor's factions. All the crime-tracking factions of the designated actor will have their crime flag cleared. See Crime.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "getactorcrimeplayerenemy", { 0x11CB, "GetActorCrimePlayerEnemy", "GetActorCrimePlayerEnemy returns a 1 if the targeted actor is an enemy of the player due to crimes committed against that actor. Note that if the player has not committed any crimes against this actor, the function will always return 0 (even if the actor's factions have been flagged to treat the player as an enemy due to crime -- see GetActorFactionPlayerEnemy).", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    {
        "getactorfactionplayerenemy",
        { 0x11CC, "GetActorFactionPlayerEnemy", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "setplayertagskill", { 0x11CD, "SetPlayerTagSkill", "Sets a specified skill to be the tag skill in a specified index (0-2). Setting a tag skill gives the player a starting bonus in that skill (fAVDTagSkillBonus).", FunctionType::Standalone, Type::Reference, 0, {} } },
    { "isplayertagskill", { 0x11CE, "IsPlayerTagSkill", "Returns 1 if the specified skill is in any of the player's tag skill indexes.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "getplayergrabbedref", { 0x11CF, "GetPlayerGrabbedRef", "GetPlayerGrabbedRef returns a reference to the object ref the player is currently grabbing (if any). ", FunctionType::Standalone, Type::Reference, 3, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "isplayergrabbedref", { 0x11D0, "IsPlayerGrabbedRef", "Returns true if the player is currently grabbing the selected reference.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "placeleveledactoratme", { 0x11D1, "PlaceLeveledActorAtMe", "PlaceLeveledActorAtMe places a leveled actor in the world, with the same parameters that are allowed in placing a leveled actor in the editor.", FunctionType::ReferenceBound, Type::Reference, 5, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "unusedfunction",
        { 0x11D2, "UnusedFunction", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "showlockpickmenu",
        { 0x11D3, "ShowLockpickMenu", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getbroadcaststate", { 0x11D4, "GetBroadcastState", "GetBroadcastState returns a 1 if the selected radio station is currently broadcasting continuously, 0 if continuous broadcast is turned off (station just plays static).", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "setbroadcaststate", { 0x11D5, "SetBroadcastState", "SetBroadcastState sets the broadcast state of a radio station.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "startradioconversation", { 0x11D6, "StartRadioConversation", "StartRadioConversation will trigger a conversation over the specified radio station.", FunctionType::ReferenceBound, Type::Reference, 2, { { Type::Reference, 0 } } } },
    { "getdestructionstage", { 0x11D7, "GetDestructionStage", "GetDestructionStage returns the current Damage Stage of a specified reference.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "cleardestruction", { 0x11D8, "ClearDestruction", "Resets everything related to destruction on a specified reference. Object health, model swap, model damage stages, self damage, etc. will return to the default state.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "castimmediateonself", { 0x11D9, "CastImmediateOnSelf", "Causes the actor to invoke the Actor Effect immediately on themselves bypassing the casting animation. This works for Actor Effects that are target self.", FunctionType::ReferenceBound, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getisalignment", { 0x11DA, "GetIsAlignment", "GetIsAlignment tests if a selected actor has a specified alignment (Good, Evil, Neutral). The function returns a 1 if the alignment matches and returns 0 if it does not.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "resetquest", { 0x11DB, "ResetQuest", "ResetQuest resets the state of everything connected to a specified quest. Specifically:", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "setquestdelay", { 0x11DC, "SetQuestDelay", "SetQuestDelay modifies the processing time delay for a script. ", FunctionType::Standalone, Type::Reference, 3, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "forceactivequest", { 0x11DD, "ForceActiveQuest", "ForceActiveQuest makes a specified quest the active quest.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "getthreatratio", { 0x11DE, "GetThreatRatio", "GetThreatRatio returns the calculated threat ratio between two specified actors.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "matchfacegeometry", { 0x11DF, "MatchFaceGeometry", "Joe's face geometry will be set to match 50% to the player's face -- meaning a 50% morph from his current face to the player's face.", FunctionType::ReferenceBound, Type::Reference, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getisuseditemequiptype", { 0x11E0, "GetIsUsedItemEquipType", "Checks if an item that matches an Equip Type is being used or activated, returning 1 if they do.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Integer, 0 } } } },
    { "getplayername", { 0x11E1, "GetPlayerName", "GetPlayerName opens the player name entry menu.", FunctionType::Standalone, Type::Reference, 0, {} } },
    { "fireweapon", { 0x11E2, "FireWeapon", "FireWeapon fires a projectile from any specified reference.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "showtutorialmenu",
        { 0x11E3, "ShowTutorialMenu", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "agerace", { 0x11E4, "AgeRace", "AgeRace changes an actor to be an older or younger version of their current race. ", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Integer, 0 } } } },
    { "matchrace", { 0x11E5, "MatchRace", "Changes an actor's race to match another actor's current race.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "setpcyoung", { 0x11E6, "SetPCYoung", "Flags the player as young. A young player only uses the default hair for his race and never loads face attachments.", FunctionType::Standalone, Type::Reference, 0, {} } },
    { "sexchange", { 0x11E7, "SexChange", "Changes the gender of the specified actor. The function has an optional parameter indicating the target sex (either Male or Female). If no parameter is passed, the actor changes to his or her opposite gender.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "showspecialbookmenu",
        { 0x11E8, "ShowSPECIALBookMenu", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getconcussed", { 0x11E9, "GetConcussed", "Returns 1 if calling actor is concussed.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "setzonerespawns", { 0x11EA, "SetZoneRespawns", "SetZoneRespawns turns respawn on or off on the specified Encounter Zone.", FunctionType::Standalone, Type::Reference, 3, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    {
        "setvatstarget",
        { 0x11EB, "SetVATSTarget", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getmapmarkervisible", { 0x11EC, "GetMapMarkerVisible", "Returns the visible state of the calling map marker reference.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "resetinventory", { 0x11ED, "ResetInventory", "Resets inventory on the references it's called on. All previously added, removed, or calculated objects will be lost.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "showspecialbookmenuparams", { 0x11EE, "ShowSPECIALBookMenuParams", "Brings up the SPECIAL book menu to allow the player to distribute or redistribute SPECIAL points.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "getpermanentactorvalue", { 0x11EF, "GetPermanentActorValue", "Returns the permanent value, no bonus from situational perks, equipped items, drugs, etc. Perks (e.g. Tag!) and items (e.g. skill books) that add permanent skill increases are included.", FunctionType::ReferenceBound, Type::Reference, 4, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "getkillingblowlimb", { 0x11F0, "GetKillingBlowLimb", "GetKillingBlowLimb returns a number indicating the last limb that was hit (dismembered, exploded, or intact) when the referenced actor was killed.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "showbarbermenu", { 0x11F1, "ShowBarberMenu", "No parameters. Brings up the menu which allows the player to select hair color and style.", FunctionType::Standalone, Type::Reference, 0, {} } },
    { "showplasticsurgeonmenu", { 0x11F2, "ShowPlasticSurgeonMenu", "ShowPlasticSurgeonMenu takes no parameters. It brings up the menu which allows the player to change his or her face.", FunctionType::Standalone, Type::Reference, 0, {} } },
    {
        "triggerlodapocalypse",
        { 0x11F3, "TriggerLODApocalypse", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getweaponhealthperc", { 0x11F4, "GetWeaponHealthPerc", "GetWeaponHealthPerc returns the condition level (health) of an actor's currently equipped weapon.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "setweaponhealthperc", { 0x11F5, "SetWeaponHealthPerc", "SetWeaponHealthPerc sets the base condition (health) of an actor's currently equipped weapon.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "modweaponhealthperc", { 0x11F6, "ModWeaponHealthPerc", "ModWeaponHealthPerc Modifies the condition (health) of an actor's currently equipped weapon.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "getradiationlevel", { 0x11F7, "GetRadiationLevel", "GetRadiationLevel returns the radiation level in the specified actor's current environment.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "showallmapmarkers", { 0x11F8, "ShowAllMapMarkers", "Adds or removes all map markers from the world map. Optional arguments specify whether to enable fast travel and whether to skip markers flagged as hidden.", FunctionType::Standalone, Type::Reference, 4, { { Type::Integer, 0 }, { Type::Integer, 0 }, { Type::Integer, 0 }, { Type::Reference, 0 } } } },
    {
        "showchargenmenumodvalues",
        { 0x11F9, "ShowChargenMenuModValues", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "resetai", { 0x11FA, "ResetAI", "ResetAI clears all current AI behaviors from an actor. Combat, pathing, and packages are re-evaluated.", FunctionType::Standalone, Type::Reference, 0, {} } },
    { "setrumble", { 0x11FB, "SetRumble", "SetRumble sets the rumble on the X-Box 360 or PS3 controller.", FunctionType::Standalone, Type::Reference, 3, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "setnoactivationsound", { 0x11FC, "SetNoActivationSound", "Overrides the default NoActivation sound with a declared sound.", FunctionType::Standalone, Type::Reference, 1, { { Type::Integer, 0 } } } },
    { "clearnoactivationsound", { 0x11FD, "ClearNoActivationSound", "Resets the NoActivation sound to default.", FunctionType::Standalone, Type::Reference, 0, {} } },
    { "getlasthitcritical", { 0x11FE, "GetLastHitCritical", "GetLastHitCritical indicates whether the last time an actor was hit resulted in a critical strike. The information is available in the ON HIT script block.", FunctionType::Standalone, Type::Reference, 0, {} } },
    { "playmusic", { 0x11FF, "PlayMusic", "Plays music.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "setlocationspecificloadscreensonly", { 0x1200, "SetLocationSpecificLoadScreensOnly", "This puts the game into a state where only load screens specifically associated with the current cell will be displayed.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "resetpipboymanager",
        { 0x1201, "ResetPipboyManager", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "setpctoddler", { 0x1202, "SetPCToddler", "Makes the player use the 'toddler walk' animation set.", FunctionType::Standalone, Type::Reference, 0, {} } },
    { "iscombattarget", { 0x1203, "IsCombatTarget", "Returns 1 if a specified Actor is a combat target of a calling reference.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "rewardkarma", { 0x1204, "RewardKarma", "RewardKarma Awards Karma Points to the player.  It is not called on a reference and the parameter is an integer which represents the amount of Karma to add to the player.", FunctionType::Standalone, Type::Reference, 1, { { Type::Integer, 0 } } } },
    { "triggerscreenblood", { 0x1205, "TriggerScreenBlood", "Shows the blood effect on screen which will slowly fade away. Higher the number the more blood you'll see, maximum is 100.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "getvatsrightareafree",
        { 0x1206, "GetVATSRightAreaFree", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "getvatsleftareafree",
        { 0x1207, "GetVATSLeftAreaFree", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "getvatsbackareafree",
        { 0x1208, "GetVATSBackAreaFree", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "getvatsfrontareafree",
        { 0x1209, "GetVATSFrontAreaFree", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getislockbroken", { 0x120A, "GetIsLockBroken", "Returns 1 if the lock on the calling reference has been broken, 0 otherwise.", FunctionType::ReferenceBound, Type::Reference, 0, {} } },
    { "isps3", { 0x120B, "IsPS3", "Returns 1 if the game is running on the PS3.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "iswin32", { 0x120C, "IsWin32", "Returns 1 if the game is running on a PC.", FunctionType::Standalone, Type::Integer, 0, {} } },
    {
        "getvatsrighttargetvisible",
        { 0x120D, "GetVATSRightTargetVisible", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "getvatslefttargetvisible",
        { 0x120E, "GetVATSLeftTargetVisible", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "getvatsbacktargetvisible",
        { 0x120F, "GetVATSBackTargetVisible", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "getvatsfronttargetvisible",
        { 0x1210, "GetVATSFrontTargetVisible", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "attachashpile", { 0x1211, "AttachAshPile", "Attaches an ash pile to the calling reference.", FunctionType::ReferenceBound, Type::Reference, 2, { { Type::Integer, 0 } } } },
    { "setcriticalstage", { 0x1212, "SetCriticalStage", "SetCriticalStage sets the reference to be in the given critical stage and applies its effects.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    { "isincriticalstage", { 0x1213, "IsInCriticalStage", "Returns 1 if the reference is in the specified critical effect stage.", FunctionType::Standalone, Type::Integer, 0, {} } },
    {
        "removefromallfactions",
        { 0x1214, "RemoveFromAllFactions", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getxpfornextlevel", { 0x1215, "GetXPForNextLevel", "Returns the amount of XP the player needs before reaching the next level.", FunctionType::Standalone, Type::Reference, 0, {} } },
    {
        "showlockpickmenudebug",
        { 0x1216, "ShowLockpickMenuDebug", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "forcesave", { 0x1217, "ForceSave", "Creates a new save in a new slot, as if the player manually did so.", FunctionType::Standalone, Type::Reference, 0, {} } },
    { "setspecialpoints", { 0x1218, "SetSPECIALPoints", "Opens the CharGen menu to the Attributes page for distributing SPECIAL points.  It sets the total amount of SPECIAL points the player has, adding or subtracting points until the given total is reached.", FunctionType::Standalone, Type::Reference, 1, { { Type::Integer, 0 } } } },
    { "addspecialpoints", { 0x1219, "AddSPECIALPoints", "AddSPECIALPoints opens the CharGen menu to the Attributes page for distributing SPECIAL points.  It adds the given number of SPECIAL points to the character.   When the menu is in this state, the player cannot decrease their character's SPECIAL points past their base values.", FunctionType::Standalone, Type::Reference, 1, { { Type::Integer, 0 } } } },
    { "settagskills", { 0x121A, "SetTagSkills", "Opens the CharGen menu to the Skills page for selecting Tagged Skills.  It sets the total number of tagged skills the player can choose.", FunctionType::Standalone, Type::Reference, 2, { { Type::Integer, 0 }, { Type::Integer, 0 } } } },
    { "addtagskills", { 0x121B, "AddTagSkills", "Opens the CharGen menu to the Skills page for selecting Tagged Skills.  It lets the player choose an extra amount of Skills to tag.   In this menu state, the player may not un-Tag their initial Tagged Skills.", FunctionType::Standalone, Type::Reference, 1, { { Type::Integer, 0 } } } },
    { "sin", { 0x121C, "Sin", "Sin When given degrees returns the sine of a given angle.", FunctionType::Standalone, Type::Reference, 13, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "cos", { 0x121D, "Cos", "When given degrees returns the cosine of a given angle.", FunctionType::Standalone, Type::Reference, 3, { { Type::Integer, 0 }, { Type::Integer, 0 } } } },
    { "tan", { 0x121E, "Tan", "Tan When given degrees returns the tangent of a given angle.", FunctionType::Standalone, Type::Reference, 13, { { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "sqrt", { 0x121F, "Sqrt", "Will return the square root of x.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "log", { 0x1220, "Log", "Log when given a number will return the natural log of that number.  Alternatively, a base can be defined by a second number.", FunctionType::Standalone, Type::Reference, 3, { { Type::Integer, 0 }, { Type::Integer, 0 } } } },
    {
        "abs",
        { 0x1221, "Abs", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getquestcompleted", { 0x1222, "GetQuestCompleted", "Returns 1 if the quest has been marked complete with CompleteQuest, otherwise 0.", FunctionType::Standalone, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Reference, 0 } } } },
    { "forceterminalback", { 0x1223, "ForceTerminalBack", "When called from the result script of a terminal menu item, this script command will force the terminal back one level.  If called from the top-level terminal, this will close the terminal and return to normal gameplay.", FunctionType::Standalone, Type::Reference, 0, {} } },
    { "pipboyradiooff", { 0x1224, "PipBoyRadioOff", "Disables the Pipboy Radio.", FunctionType::Standalone, Type::Reference, 0, {} } },
    { "autodisplayobjectives", { 0x1225, "AutoDisplayObjectives", "AutoDisplayObjectives turns on or off the automatic display of objectives from the player's active quest. This is usually used in situations where the Pip-Boy is unavailable for some reason (for instance because the player's controls are partially disabled).", FunctionType::Standalone, Type::Reference, 0, {} } },
    { "isgoredisabled", { 0x1226, "IsGoreDisabled", "Returns 1 if gore is disabled, 0 otherwise.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "fadesfx", { 0x1227, "FadeSFX", "FadeSFX disabled all the sounds except the music.Useful when showing Bink Video files.", FunctionType::Standalone, Type::Reference, 2, { { Type::Integer, 0 }, { Type::Reference, 0 } } } },
    { "setminimaluse", { 0x1228, "SetMinimalUse", "This sets the 'minimal use' flag on a door.", FunctionType::ReferenceBound, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "setpccanusepowerarmor",
        { 0x1229, "SetPCCanUsePowerArmor", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    {
        "showqueststages",
        { 0x122A, "ShowQuestStages", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "getspellusagenum", { 0x122B, "GetSpellUsageNum", "Returns the number of times an Ingestible has been used by an actor, while its effects are active. The function works on ingestibles that have a Usage Monitor Effect attached to them, and return value is multiplied by effect magnitude.", FunctionType::ReferenceBound, Type::Integer, 2, { { Type::Reference, 0 }, { Type::Integer, 0 } } } },
    { "forceradiostationupdate", { 0x122C, "ForceRadioStationUpdate", "Forces radio update.", FunctionType::Standalone, Type::Reference, 1, { { Type::Reference, 0 } } } },
    {
        "getactorsinhigh",
        { 0x122D, "GetActorsInHigh", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "hasloaded3d", { 0x122E, "HasLoaded3D", "Returns 1 if the calling reference currently has 3D loaded.", FunctionType::Standalone, Type::Integer, 0, {} } },
    { "disableallmines", { 0x122F, "DisableAllMines", "Disables all the mines located in the cell the player is in.", FunctionType::Standalone, Type::Reference, 0, {} } },
    { "setlastextdooractivated", { 0x1230, "SetLastExtDoorActivated", "Sets the last exterior door activated.", FunctionType::Standalone, Type::Reference, 1, { { Type::Integer, 0 } } } },
    {
        "killquestupdates",
        { 0x1231, "KillQuestUpdates", "", FunctionType::Standalone, Type::Reference, 0, {} },
    },
    { "isimagespaceactive", { 0x1232, "IsImageSpaceActive", "Returns true if the specified ImageSpace Modifier is active.", FunctionType::Standalone, Type::Integer, 0, {} } },

});

std::unordered_map<uint16_t, std::string> FunctionResolver::opcodeFuncs = {
    { 0x1000, "UnusedFunction0" },
    { 0x1001, "GetDistance" },
    { 0x1002, "AddItem" },
    { 0x1003, "SetEssential" },
    { 0x1004, "Rotate" },
    { 0x1005, "GetLocked" },
    { 0x1006, "GetPos" },
    { 0x1007, "SetPos" },
    { 0x1008, "GetAngle" },
    { 0x1009, "SetAngle" },
    { 0x100A, "GetStartingPos" },
    { 0x100B, "GetStartingAngle" },
    { 0x100C, "GetSecondsPassed" },
    { 0x100D, "Activate" },
    { 0x100E, "GetActorValue" },
    { 0x100F, "SetActorValue" },
    { 0x1010, "ModActorValue" },
    { 0x1011, "SetAtStart" },
    { 0x1012, "GetCurrentTime" },
    { 0x1013, "PlayGroup" },
    { 0x1014, "LoopGroup" },
    { 0x1015, "SkipAnim" },
    { 0x1016, "StartCombat" },
    { 0x1017, "StopCombat" },
    { 0x1018, "GetScale" },
    { 0x1019, "IsMoving" },
    { 0x101A, "IsTurning" },
    { 0x101B, "GetLineOfSight" },
    { 0x101C, "AddSpell" },
    { 0x101D, "RemoveSpell" },
    { 0x101E, "Cast" },
    { 0x101F, "GetButtonPressed" },
    { 0x1020, "GetInSameCell" },
    { 0x1021, "Enable" },
    { 0x1022, "Disable" },
    { 0x1023, "GetDisabled" },
    { 0x1024, "MenuMode" },
    { 0x1025, "PlaceAtMe" },
    { 0x1026, "PlaySound" },
    { 0x1027, "GetDisease" },
    { 0x1028, "GetVampire" },
    { 0x1029, "GetClothingValue" },
    { 0x102A, "SameFaction" },
    { 0x102B, "SameRace" },
    { 0x102C, "SameSex" },
    { 0x102D, "GetDetected" },
    { 0x102E, "GetDead" },
    { 0x102F, "GetItemCount" },
    { 0x1030, "GetGold" },
    { 0x1031, "GetSleeping" },
    { 0x1032, "GetTalkedToPC" },
    { 0x1033, "Say" },
    { 0x1034, "SayTo" },
    { 0x1035, "GetScriptVariable" },
    { 0x1036, "StartQuest" },
    { 0x1037, "StopQuest" },
    { 0x1038, "GetQuestRunning" },
    { 0x1039, "SetStage" },
    { 0x103A, "GetStage" },
    { 0x103B, "GetStageDone" },
    { 0x103C, "GetFactionRankDifference" },
    { 0x103D, "GetAlarmed" },
    { 0x103E, "IsRaining" },
    { 0x103F, "GetAttacked" },
    { 0x1040, "GetIsCreature" },
    { 0x1041, "GetLockLevel" },
    { 0x1042, "GetShouldAttack" },
    { 0x1043, "GetInCell" },
    { 0x1044, "GetIsClass" },
    { 0x1045, "GetIsRace" },
    { 0x1046, "GetIsSex" },
    { 0x1047, "GetInFaction" },
    { 0x1048, "GetIsID" },
    { 0x1049, "GetFactionRank" },
    { 0x104A, "GetGlobalValue" },
    { 0x104B, "IsSnowing" },
    { 0x104C, "GetDisposition" },
    { 0x104D, "GetRandomPercent" },
    { 0x104E, "StreamMusic" },
    { 0x104F, "GetQuestVariable" },
    { 0x1050, "GetLevel" },
    { 0x1051, "GetArmorRating" },
    { 0x1052, "RemoveItem" },
    { 0x1053, "ModDisposition" },
    { 0x1054, "GetDeadCount" },
    { 0x1055, "ShowMap" },
    { 0x1056, "StartConversation" },
    { 0x1057, "Drop" },
    { 0x1058, "AddTopic" },
    { 0x1059, "ShowMessage" },
    { 0x105A, "SetAlert" },
    { 0x105B, "GetIsAlerted" },
    { 0x105C, "Look" },
    { 0x105D, "StopLook" },
    { 0x105E, "EvaluatePackage" },
    { 0x105F, "SendAssaultAlarm" },
    { 0x1060, "EnablePlayerControls" },
    { 0x1061, "DisablePlayerControls" },
    { 0x1062, "GetPlayerControlsDisabled" },
    { 0x1063, "GetHeadingAngle" },
    { 0x1064, "PickIdle" },
    { 0x1065, "IsWeaponOut" },
    { 0x1066, "IsTorchOut" },
    { 0x1067, "IsShieldOut" },
    { 0x1068, "CreateDetectionEvent" },
    { 0x1069, "IsActionRef" },
    { 0x106A, "IsFacingUp" },
    { 0x106B, "GetKnockedState" },
    { 0x106C, "GetWeaponAnimType" },
    { 0x106D, "IsWeaponSkillType" },
    { 0x106E, "GetCurrentAIPackage" },
    { 0x106F, "IsWaiting" },
    { 0x1070, "IsIdlePlaying" },
    { 0x1071, "CompleteQuest" },
    { 0x1072, "Lock" },
    { 0x1073, "UnLock" },
    { 0x1074, "GetMinorCrimeCount" },
    { 0x1075, "GetMajorCrimeCount" },
    { 0x1076, "GetActorAggroRadiusViolated" },
    { 0x1077, "GetCrimeKnown" },
    { 0x1078, "SetEnemy" },
    { 0x1079, "SetAlly" },
    { 0x107A, "GetCrime" },
    { 0x107B, "IsGreetingPlayer" },
    { 0x107C, "StartMisterSandMan" },
    { 0x107D, "IsGuard" },
    { 0x107E, "StartCannibal" },
    { 0x107F, "HasBeenEaten" },
    { 0x1080, "GetFatiguePercentage" },
    { 0x1081, "GetPCIsClass" },
    { 0x1082, "GetPCIsRace" },
    { 0x1083, "GetPCIsSex" },
    { 0x1084, "GetPCInFaction" },
    { 0x1085, "SameFactionAsPC" },
    { 0x1086, "SameRaceAsPC" },
    { 0x1087, "SameSexAsPC" },
    { 0x1088, "GetIsReference" },
    { 0x1089, "SetFactionRank" },
    { 0x108A, "ModFactionRank" },
    { 0x108B, "KillActor" },
    { 0x108C, "ResurrectActor" },
    { 0x108D, "IsTalking" },
    { 0x108E, "GetWalkSpeed" },
    { 0x108F, "GetCurrentAIProcedure" },
    { 0x1090, "GetTrespassWarningLevel" },
    { 0x1091, "IsTrespassing" },
    { 0x1092, "IsInMyOwnedCell" },
    { 0x1093, "GetWindSpeed" },
    { 0x1094, "GetCurrentWeatherPercent" },
    { 0x1095, "GetIsCurrentWeather" },
    { 0x1096, "IsContinuingPackagePCNear" },
    { 0x1097, "AddScriptPackage" },
    { 0x1098, "RemoveScriptPackage" },
    { 0x1099, "CanHaveFlames" },
    { 0x109A, "HasFlames" },
    { 0x109B, "AddFlames" },
    { 0x109C, "RemoveFlames" },
    { 0x109D, "GetOpenState" },
    { 0x109E, "MoveToMarker" },
    { 0x109F, "GetSitting" },
    { 0x10A0, "GetFurnitureMarkerID" },
    { 0x10A1, "GetIsCurrentPackage" },
    { 0x10A2, "IsCurrentFurnitureRef" },
    { 0x10A3, "IsCurrentFurnitureObj" },
    { 0x10A4, "SetSize" },
    { 0x10A5, "RemoveMe" },
    { 0x10A6, "DropMe" },
    { 0x10A7, "GetFactionReaction" },
    { 0x10A8, "SetFactionReaction" },
    { 0x10A9, "ModFactionReaction" },
    { 0x10AA, "GetDayOfWeek" },
    { 0x10AB, "IgnoreCrime" },
    { 0x10AC, "GetTalkedToPCParam" },
    { 0x10AD, "RemoveAllItems" },
    { 0x10AE, "WakeUpPC" },
    { 0x10AF, "IsPCSleeping" },
    { 0x10B0, "IsPCAMurderer" },
    { 0x10B1, "SetCombatStyle" },
    { 0x10B2, "PlaySound3D" },
    { 0x10B3, "SelectPlayerSpell" },
    { 0x10B4, "GetDetectionLevel" },
    { 0x10B5, "IsActorDetected" },
    { 0x10B6, "GetEquipped" },
    { 0x10B7, "Wait" },
    { 0x10B8, "StopWaiting" },
    { 0x10B9, "IsSwimming" },
    { 0x10BA, "ScriptEffectElapsedSeconds" },
    { 0x10BB, "SetCellPublicFlag" },
    { 0x10BC, "GetPCSleepHours" },
    { 0x10BD, "SetPCSleepHours" },
    { 0x10BE, "GetAmountSoldStolen" },
    { 0x10BF, "ModAmountSoldStolen" },
    { 0x10C0, "GetIgnoreCrime" },
    { 0x10C1, "GetPCExpelled" },
    { 0x10C2, "SetPCExpelled" },
    { 0x10C3, "GetPCFactionMurder" },
    { 0x10C4, "SetPCFactionMurder" },
    { 0x10C5, "GetPCEnemyofFaction" },
    { 0x10C6, "SetPCEnemyofFaction" },
    { 0x10C7, "GetPCFactionAttack" },
    { 0x10C8, "SetPCFactionAttack" },
    { 0x10C9, "UnusedFunction21" },
    { 0x10CA, "UnusedFunction22" },
    { 0x10CB, "GetDestroyed" },
    { 0x10CC, "SetDestroyed" },
    { 0x10CD, "GetActionRef" },
    { 0x10CE, "GetSelf" },
    { 0x10CF, "GetContainer" },
    { 0x10D0, "GetForceRun" },
    { 0x10D1, "SetForceRun" },
    { 0x10D2, "GetForceSneak" },
    { 0x10D3, "SetForceSneak" },
    { 0x10D4, "AdvancePCSkill" },
    { 0x10D5, "AdvancePCLevel" },
    { 0x10D6, "HasMagicEffect" },
    { 0x10D7, "GetDefaultOpen" },
    { 0x10D8, "SetDefaultOpen" },
    { 0x10D9, "ShowClassMenu" },
    { 0x10DA, "ShowRaceMenu" },
    { 0x10DB, "GetAnimAction" },
    { 0x10DC, "ShowNameMenu" },
    { 0x10DD, "SetOpenState" },
    { 0x10DE, "UnusedFunction26" },
    { 0x10DF, "IsSpellTarget" },
    { 0x10E0, "GetVATSMode" },
    { 0x10E1, "GetPersuasionNumber" },
    { 0x10E2, "GetSandman" },
    { 0x10E3, "GetCannibal" },
    { 0x10E4, "GetIsClassDefault" },
    { 0x10E5, "GetClassDefaultMatch" },
    { 0x10E6, "GetInCellParam" },
    { 0x10E7, "SetInChargen" },
    { 0x10E8, "GetCombatTarget" },
    { 0x10E9, "GetPackageTarget" },
    { 0x10EA, "ShowSpellMaking" },
    { 0x10EB, "GetVatsTargetHeight" },
    { 0x10EC, "SetGhost" },
    { 0x10ED, "GetIsGhost" },
    { 0x10EE, "EquipItem" },
    { 0x10EF, "UnequipItem" },
    { 0x10F0, "SetClass" },
    { 0x10F1, "SetUnconscious" },
    { 0x10F2, "GetUnconscious" },
    { 0x10F3, "SetRestrained" },
    { 0x10F4, "GetRestrained" },
    { 0x10F5, "ForceFlee" },
    { 0x10F6, "GetIsUsedItem" },
    { 0x10F7, "GetIsUsedItemType" },
    { 0x10F8, "UnusedFunction9" },
    { 0x10F9, "UnusedFunction10" },
    { 0x10FA, "UnusedFunction11" },
    { 0x10FB, "UnusedFunction12" },
    { 0x10FC, "UnusedFunction13" },
    { 0x10FD, "UnusedFunction14" },
    { 0x10FE, "GetIsPlayableRace" },
    { 0x10FF, "GetOffersServicesNow" },
    { 0x1100, "GetGameSetting" },
    { 0x1101, "StopCombatAlarmOnActor" },
    { 0x1102, "GetUsedItemLevel" },
    { 0x1103, "GetUsedItemActivate" },
    { 0x1104, "SetWeather" },
    { 0x1105, "ForceTakeCover" },
    { 0x1106, "ModBarterGold" },
    { 0x1107, "SetBarterGold" },
    { 0x1108, "GetBarterGold" },
    { 0x1109, "IsTimePassing" },
    { 0x110A, "IsPleasant" },
    { 0x110B, "IsCloudy" },
    { 0x110C, "TrapUpdate" },
    { 0x110D, "SetQuestObject" },
    { 0x110E, "ForceActorValue" },
    { 0x110F, "ModPCSkill" },
    { 0x1110, "ModPCAttribute" },
    { 0x1111, "EnableFastTravel" },
    { 0x1112, "GetArmorRatingUpperBody" },
    { 0x1113, "GetParentRef" },
    { 0x1114, "PlayBink" },
    { 0x1115, "GetBaseActorValue" },
    { 0x1116, "IsOwner" },
    { 0x1117, "SetOwnership" },
    { 0x1118, "IsCellOwner" },
    { 0x1119, "SetCellOwnership" },
    { 0x111A, "IsHorseStolen" },
    { 0x111B, "SetCellFullName" },
    { 0x111C, "SetActorFullName" },
    { 0x111D, "IsLeftUp" },
    { 0x111E, "IsSneaking" },
    { 0x111F, "IsRunning" },
    { 0x1120, "GetFriendHit" },
    { 0x1121, "IsInCombat" },
    { 0x1122, "SetPackDuration" },
    { 0x1123, "PlayMagicShaderVisuals" },
    { 0x1124, "PlayMagicEffectVisuals" },
    { 0x1125, "StopMagicShaderVisuals" },
    { 0x1126, "StopMagicEffectVisuals" },
    { 0x1127, "ResetInterior" },
    { 0x1128, "IsAnimPlaying" },
    { 0x1129, "SetActorAlpha" },
    { 0x112A, "EnableLinkedPathPoints" },
    { 0x112B, "DisableLinkedPathPoints" },
    { 0x112C, "IsInInterior" },
    { 0x112D, "ForceWeather" },
    { 0x112E, "ToggleActorsAI" },
    { 0x112F, "IsActorsAIOff" },
    { 0x1130, "IsWaterObject" },
    { 0x1131, "UnusedFunction15" },
    { 0x1132, "IsActorUsingATorch" },
    { 0x1133, "SetLevel" },
    { 0x1134, "ResetFallDamageTimer" },
    { 0x1135, "IsXBox" },
    { 0x1136, "GetInWorldspace" },
    { 0x1137, "ModPCMiscStat" },
    { 0x1138, "GetPCMiscStat" },
    { 0x1139, "IsActorEvil" },
    { 0x113A, "IsActorAVictim" },
    { 0x113B, "GetTotalPersuasionNumber" },
    { 0x113C, "SetScale" },
    { 0x113D, "ModScale" },
    { 0x113E, "GetIdleDoneOnce" },
    { 0x113F, "KillAllActors" },
    { 0x1140, "GetNoRumors" },
    { 0x1141, "SetNoRumors" },
    { 0x1142, "Dispel" },
    { 0x1143, "WhichServiceMenu" },
    { 0x1144, "TriggerHitShader" },
    { 0x1145, "FunctionUnused16" },
    { 0x1146, "Reset3DState" },
    { 0x1147, "IsRidingHorse" },
    { 0x1148, "DispelAllSpells" },
    { 0x1149, "UnusedFunction17" },
    { 0x114A, "AddAchievement" },
    { 0x114B, "DuplicateAllItems" },
    { 0x114C, "IsInDangerousWater" },
    { 0x114D, "EssentialDeathReload" },
    { 0x114E, "SetShowQuestItems" },
    { 0x114F, "DuplicateNPCStats" },
    { 0x1150, "ResetHealth" },
    { 0x1151, "SetIgnoreFriendlyHits" },
    { 0x1152, "GetIgnoreFriendlyHits" },
    { 0x1153, "IsPlayersLastRiddenHorse" },
    { 0x1154, "SetActorRefraction" },
    { 0x1155, "SetItemValue" },
    { 0x1156, "SetRigidBodyMass" },
    { 0x1157, "ShowViewerStrings" },
    { 0x1158, "ReleaseWeatherOverride" },
    { 0x1159, "SetAllReachable" },
    { 0x115A, "SetAllVisible" },
    { 0x115B, "SetNoAvoidance" },
    { 0x115C, "SendTrespassAlarm" },
    { 0x115D, "SetSceneIsComplex" },
    { 0x115E, "Autosave" },
    { 0x115F, "StartMasterFileSeekData" },
    { 0x1160, "DumpMasterFileSeekData" },
    { 0x1161, "IsActor" },
    { 0x1162, "IsEssential" },
    { 0x1163, "PreloadMagicEffect" },
    { 0x1164, "ShowDialogSubtitles" },
    { 0x1165, "UnusedFunction27" },
    { 0x1166, "IsPlayerMovingIntoNewSpace" },
    { 0x1167, "UnusedFunction28" },
    { 0x1168, "UnusedFunction29" },
    { 0x1169, "GetTimeDead" },
    { 0x116A, "GetPlayerHasLastRiddenHorse" },
    { 0x116B, "GetLinkedRef" },
    { 0x116C, "DamageObject" },
    { 0x116D, "IsChild" },
    { 0x116E, "UnusedFunction1" },
    { 0x116F, "GetLastPlayerAction" },
    { 0x1170, "IsPlayerActionActive" },
    { 0x1171, "SetTalkingActivatorActor" },
    { 0x1172, "IsTalkingActivatorActor" },
    { 0x1173, "ShowBarterMenu" },
    { 0x1174, "IsInList" },
    { 0x1175, "UnusedFunction18" },
    { 0x1176, "AddPerk" },
    { 0x1177, "RewardXP" },
    { 0x1178, "ShowHackingMiniGame" },
    { 0x1179, "ShowSurgeryMenu" },
    { 0x117A, "ShowRepairMenu" },
    { 0x117B, "FunctionUnused19" },
    { 0x117C, "AddNote" },
    { 0x117D, "RemoveNote" },
    { 0x117E, "GetHasNote" },
    { 0x117F, "AddToFaction" },
    { 0x1180, "RemoveFromFaction" },
    { 0x1181, "DamageActorValue" },
    { 0x1182, "RestoreActorValue" },
    { 0x1183, "TriggerHUDShudder" },
    { 0x1184, "SetDisposition" },
    { 0x1185, "ShowComputersInterface" },
    { 0x1186, "SetGlobalTimeMultiplier" },
    { 0x1187, "GetHitLocation" },
    { 0x1188, "IsPC1stPerson" },
    { 0x1189, "PurgeCellBuffers" },
    { 0x118A, "PushActorAway" },
    { 0x118B, "SetActorsAI" },
    { 0x118C, "ClearOwnership" },
    { 0x118D, "GetCauseofDeath" },
    { 0x118E, "IsLimbGone" },
    { 0x118F, "IsWeaponInList" },
    { 0x1190, "PlayIdle" },
    { 0x1191, "ApplyImageSpaceModifier" },
    { 0x1192, "RemoveImageSpaceModifier" },
    { 0x1193, "HasFriendDisposition" },
    { 0x1194, "FunctionUnused20" },
    { 0x1195, "FriendDispositionBoost" },
    { 0x1196, "SetCellImageSpace" },
    { 0x1197, "ShowChargenMenu" },
    { 0x1198, "GetVATSValue" },
    { 0x1199, "IsKiller" },
    { 0x119A, "IsKillerObject" },
    { 0x119B, "GetFactionCombatReaction" },
    { 0x119C, "UseWeapon" },
    { 0x119D, "EvaluateSpellConditions" },
    { 0x119E, "ToggleMotionBlur" },
    { 0x119F, "Exists" },
    { 0x11A0, "GetGroupMemberCount" },
    { 0x11A1, "GetGroupTargetCount" },
    { 0x11A2, "SetObjectiveCompleted" },
    { 0x11A3, "SetObjectiveDisplayed" },
    { 0x11A4, "GetObjectiveCompleted" },
    { 0x11A5, "GetObjectiveDisplayed" },
    { 0x11A6, "SetImageSpace" },
    { 0x11A7, "PipboyRadio" },
    { 0x11A8, "RemovePerk" },
    { 0x11A9, "DisableAllActors" },
    { 0x11AA, "GetIsFormType" },
    { 0x11AB, "GetIsVoiceType" },
    { 0x11AC, "GetPlantedExplosive" },
    { 0x11AD, "CompleteAllObjectives" },
    { 0x11AE, "IsActorTalkingThroughActivator" },
    { 0x11AF, "GetHealthPercentage" },
    { 0x11B0, "SetAudioMultithreading" },
    { 0x11B1, "GetIsObjectType" },
    { 0x11B2, "ShowChargenMenuParams" },
    { 0x11B3, "GetDialogueEmotion" },
    { 0x11B4, "GetDialogueEmotionValue" },
    { 0x11B5, "ExitGame" },
    { 0x11B6, "GetIsCreatureType" },
    { 0x11B7, "SetMerchantContainer" },
    { 0x11B8, "RemoveMerchantContainer" },
    { 0x11B9, "ShowWarning" },
    { 0x11BA, "EnterTrigger" },
    { 0x11BB, "MarkForDelete" },
    { 0x11BC, "AddItemHealthPercent" },
    { 0x11BD, "PlaceAtMeHealthPercent" },
    { 0x11BE, "GetInZone" },
    { 0x11BF, "DisableNavMesh" },
    { 0x11C0, "EnableNavMesh" },
    { 0x11C1, "HasPerk" },
    { 0x11C2, "GetFactionRelation" },
    { 0x11C3, "IsLastIdlePlayed" },
    { 0x11C4, "SetNPCRadio" },
    { 0x11C5, "SetPlayerTeammate" },
    { 0x11C6, "GetPlayerTeammate" },
    { 0x11C7, "GetPlayerTeammateCount" },
    { 0x11C8, "OpenTeammateContainer" },
    { 0x11C9, "ClearFactionPlayerEnemyFlag" },
    { 0x11CA, "ClearActorsFactionsPlayerEnemyFlag" },
    { 0x11CB, "GetActorCrimePlayerEnemy" },
    { 0x11CC, "GetActorFactionPlayerEnemy" },
    { 0x11CD, "SetPlayerTagSkill" },
    { 0x11CE, "IsPlayerTagSkill" },
    { 0x11CF, "GetPlayerGrabbedRef" },
    { 0x11D0, "IsPlayerGrabbedRef" },
    { 0x11D1, "PlaceLeveledActorAtMe" },
    { 0x11D2, "UnusedFunction" },
    { 0x11D3, "ShowLockpickMenu" },
    { 0x11D4, "GetBroadcastState" },
    { 0x11D5, "SetBroadcastState" },
    { 0x11D6, "StartRadioConversation" },
    { 0x11D7, "GetDestructionStage" },
    { 0x11D8, "ClearDestruction" },
    { 0x11D9, "CastImmediateOnSelf" },
    { 0x11DA, "GetIsAlignment" },
    { 0x11DB, "ResetQuest" },
    { 0x11DC, "SetQuestDelay" },
    { 0x11DD, "ForceActiveQuest" },
    { 0x11DE, "GetThreatRatio" },
    { 0x11DF, "MatchFaceGeometry" },
    { 0x11E0, "GetIsUsedItemEquipType" },
    { 0x11E1, "GetPlayerName" },
    { 0x11E2, "FireWeapon" },
    { 0x11E3, "ShowTutorialMenu" },
    { 0x11E4, "AgeRace" },
    { 0x11E5, "MatchRace" },
    { 0x11E6, "SetPCYoung" },
    { 0x11E7, "SexChange" },
    { 0x11E8, "ShowSPECIALBookMenu" },
    { 0x11E9, "GetConcussed" },
    { 0x11EA, "SetZoneRespawns" },
    { 0x11EB, "SetVATSTarget" },
    { 0x11EC, "GetMapMarkerVisible" },
    { 0x11ED, "ResetInventory" },
    { 0x11EE, "ShowSPECIALBookMenuParams" },
    { 0x11EF, "GetPermanentActorValue" },
    { 0x11F0, "GetKillingBlowLimb" },
    { 0x11F1, "ShowBarberMenu" },
    { 0x11F2, "ShowPlasticSurgeonMenu" },
    { 0x11F3, "TriggerLODApocalypse" },
    { 0x11F4, "GetWeaponHealthPerc" },
    { 0x11F5, "SetWeaponHealthPerc" },
    { 0x11F6, "ModWeaponHealthPerc" },
    { 0x11F7, "GetRadiationLevel" },
    { 0x11F8, "ShowAllMapMarkers" },
    { 0x11F9, "ShowChargenMenuModValues" },
    { 0x11FA, "ResetAI" },
    { 0x11FB, "SetRumble" },
    { 0x11FC, "SetNoActivationSound" },
    { 0x11FD, "ClearNoActivationSound" },
    { 0x11FE, "GetLastHitCritical" },
    { 0x11FF, "PlayMusic" },
    { 0x1200, "SetLocationSpecificLoadScreensOnly" },
    { 0x1201, "ResetPipboyManager" },
    { 0x1202, "SetPCToddler" },
    { 0x1203, "IsCombatTarget" },
    { 0x1204, "RewardKarma" },
    { 0x1205, "TriggerScreenBlood" },
    { 0x1206, "GetVATSRightAreaFree" },
    { 0x1207, "GetVATSLeftAreaFree" },
    { 0x1208, "GetVATSBackAreaFree" },
    { 0x1209, "GetVATSFrontAreaFree" },
    { 0x120A, "GetIsLockBroken" },
    { 0x120B, "IsPS3" },
    { 0x120C, "IsWin32" },
    { 0x120D, "GetVATSRightTargetVisible" },
    { 0x120E, "GetVATSLeftTargetVisible" },
    { 0x120F, "GetVATSBackTargetVisible" },
    { 0x1210, "GetVATSFrontTargetVisible" },
    { 0x1211, "AttachAshPile" },
    { 0x1212, "SetCriticalStage" },
    { 0x1213, "IsInCriticalStage" },
    { 0x1214, "RemoveFromAllFactions" },
    { 0x1215, "GetXPForNextLevel" },
    { 0x1216, "ShowLockpickMenuDebug" },
    { 0x1217, "ForceSave" },
    { 0x1218, "SetSPECIALPoints" },
    { 0x1219, "AddSPECIALPoints" },
    { 0x121A, "SetTagSkills" },
    { 0x121B, "AddTagSkills" },
    { 0x121C, "Sin" },
    { 0x121D, "Cos" },
    { 0x121E, "Tan" },
    { 0x121F, "Sqrt" },
    { 0x1220, "Log" },
    { 0x1221, "Abs" },
    { 0x1222, "GetQuestCompleted" },
    { 0x1223, "ForceTerminalBack" },
    { 0x1224, "PipBoyRadioOff" },
    { 0x1225, "AutoDisplayObjectives" },
    { 0x1226, "IsGoreDisabled" },
    { 0x1227, "FadeSFX" },
    { 0x1228, "SetMinimalUse" },
    { 0x1229, "SetPCCanUsePowerArmor" },
    { 0x122A, "ShowQuestStages" },
    { 0x122B, "GetSpellUsageNum" },
    { 0x122C, "ForceRadioStationUpdate" },
    { 0x122D, "GetActorsInHigh" },
    { 0x122E, "HasLoaded3D" },
    { 0x122F, "DisableAllMines" },
    { 0x1230, "SetLastExtDoorActivated" },
    { 0x1231, "KillQuestUpdates" },
    { 0x1232, "IsImageSpaceActive" },
};

std::unordered_map<std::string, std::string> FunctionResolver::functionAliases({
    { "getav", "getactorvalue" },
    { "setav", "setactorvalue" },
    { "modav", "modactorvalue" },
    { "getlos", "getlineofsight" },
    { "getqr", "getquestrunning" },
    { "evp", "evaluatepackage" },
    { "getfatigue", "getfatiguepercentage" },
    { "kill", "killactor" },
    { "resurrect", "resurrectactor" },
    { "getwalk", "getwalkspeed" },
    { "getweatherpct", "getcurrentweatherpercent" },
    { "getweather", "getiscurrentweather" },
    { "moveto", "movetomarker" },
    { "csize", "setsize" },
    { "setcs", "setcombatstyle" },
    { "spspell", "selectplayerspell" },
    { "setpublic", "setcellpublicflag" },
    { "getar", "getactionref" },
    { "this", "getself" },
    { "advskill", "advancepcskill" },
    { "advlevel", "advancepclevel" },
    { "equipobject", "equipitem" },
    { "unequipobject", "unequipitem" },
    { "flee", "forceflee" },
    { "getgs", "getgamesetting" },
    { "scaonactor", "stopcombatalarmonactor" },
    { "sw", "setweather" },
    { "takecover", "forcetakecover" },
    { "forceav", "forceactorvalue" },
    { "modpcs", "modpcskill" },
    { "modpca", "modpcattribute" },
    { "enablefast", "enablefasttravel" },
    { "getbaseav", "getbaseactorvalue" },
    { "spdur", "setpackduration" },
    { "pms", "playmagicshadervisuals" },
    { "pme", "playmagiceffectvisuals" },
    { "sms", "stopmagicshadervisuals" },
    { "sme", "stopmagiceffectvisuals" },
    { "saa", "setactoralpha" },
    { "fw", "forceweather" },
    { "modpcms", "modpcmiscstat" },
    { "getpcms", "getpcmiscstat" },
    { "killall", "killallactors" },
    { "ths", "triggerhitshader" },
    { "sifh", "setignorefriendlyhits" },
    { "gifh", "getignorefriendlyhits" },
    { "sar", "setactorrefraction" },
    { "svs", "showviewerstrings" },
    { "rwo", "releaseweatheroverride" },
    { "do", "damageobject" },
    { "sbm", "showbartermenu" },
    { "shmg", "showhackingminigame" },
    { "ssmg", "showsurgerymenu" },
    { "srm", "showrepairmenu" },
    { "unused", "functionunused19" },
    { "an", "addnote" },
    { "rn", "removenote" },
    { "getn", "gethasnote" },
    { "addfac", "addtofaction" },
    { "removefac", "removefromfaction" },
    { "damageav", "damageactorvalue" },
    { "restoreav", "restoreactorvalue" },
    { "hudsh", "triggerhudshudder" },
    { "setdisp", "setdisposition" },
    { "sci", "showcomputersinterface" },
    { "sgtm", "setglobaltimemultiplier" },
    { "pc1st", "ispc1stperson" },
    { "pcb", "purgecellbuffers" },
    { "imod", "applyimagespacemodifier" },
    { "rimod", "removeimagespacemodifier" },
    { "scgm", "showchargenmenu" },
    { "esc", "evaluatespellconditions" },
    { "tmb", "togglemotionblur" },
    { "prad", "pipboyradio" },
    { "disaa", "disableallactors" },
    { "sam", "setaudiomultithreading" },
    { "scgmp", "showchargenmenuparams" },
    { "exit", "exitgame" },
    { "snr", "setnpcradio" },
    { "slpm", "showlockpickmenu" },
    { "cios", "castimmediateonself" },
    { "ssbm", "showspecialbookmenu" },
    { "ssbmp", "showspecialbookmenuparams" },
    { "getpermav", "getpermanentactorvalue" },
    { "tmm", "showallmapmarkers" },
    { "scgmod", "showchargenmenumodvalues" },
    { "tsb", "triggerscreenblood" },
    { "slpmd", "showlockpickmenudebug" },
    { "getqc", "getquestcompleted" },
    { "fsfx", "fadesfx" },
    { "sqs", "showqueststages" },
    { "frsu", "forceradiostationupdate" },
    { "kqu", "killquestupdates" },
    { "srmp", "showroulettemenuparams" },
    { "sslmp", "showslotmachinemenuparams" },

});

bool FunctionResolver::callFunction(uint16_t opcode)
{
    // TODO: see todo in function.hpp
    if (!FunctionResolver::opcodeFuncs.count(opcode)) {
        return false;
    }

    log_info("%s called", FunctionResolver::opcodeFuncs[opcode].c_str());
    return true;
}

bool FunctionResolver::lookupFunction(uint16_t opcode)
{
    log_debug("DEBUG: funcID 0x%.2x", opcode);
    return FunctionResolver::opcodeFuncs.count(opcode);
}

bool FunctionResolver::isFunction(std::string& name)
{
    return functions.count(name);
}
bool FunctionResolver::isFunctionAlias(std::string& name)
{
    return functionAliases.count(name);
}

std::string& FunctionResolver::getFunctionByAlias(std::string& name)
{
    return functionAliases[name];
}

FunctionInfo& FunctionResolver::getFunctionInfo(std::string& name)
{
    return functions[name];
}

}
